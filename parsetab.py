
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'yapl_mnmleftORORleftANDANDleftEQUALEQUALleftLTLEGTGEleftLPARENRPARENleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSrightNOTACCESS ANDAND COMMA COMPLEX DISP DIVIDE END EQUAL EQUALEQUAL EXPS FALSE FIRE G1 GE GT IDENTIFIER LBRACE LE LPAREN LSQUAREPAREN LT MACHINE MAYBE MINUS MINUSMINUS MOD NOT NUMBER OR OROR PERFORM PLUS PLUSPLUS RBRACE RPAREN RSQUAREPAREN SEMICOLON SNAKE STRING SUPPOSE TIL TIMES TRUE UNTIL WORK\n    yapl_mnm : exp\n             | til\n             | assign_identifier\n             | snake_list\n             | snake_list_access\n             | rel_exp\n             | disp_var\n             | empty\n    til : TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt\n    stmt : exp\n             | til\n             | assign_identifier\n             | snake_list\n             | snake_list_access\n             | rel_exp\n             | disp_var\n             | empty\n    \n    snake_list : SNAKE IDENTIFIER EQUAL num_snake\n               | SNAKE IDENTIFIER EQUAL string_snake\n               | SNAKE IDENTIFIER EQUAL bool_snake\n    \n    snake_list_access : ACCESS IDENTIFIER NUMBER\n    \n    num_snake : num_snake COMMA exp\n              | exp\n              | empty\n    \n    string_snake : string_snake COMMA STRING\n                 | STRING\n                 | empty\n    \n    bool_snake : bool_snake COMMA bool\n               | bool\n    empty :\n    assign_identifier : SUPPOSE IDENTIFIER EQUAL exp\n    \n    assign_identifier : IDENTIFIER EQUAL exp\n    \n    disp_var : DISP IDENTIFIER\n    \n    exp : exp TIMES exp\n        | exp DIVIDE exp\n        | exp PLUS exp\n        | exp MINUS exp\n        | exp MOD exp\n    \n    exp : exp PLUSPLUS\n        | exp MINUSMINUS\n    exp : MINUS exp %prec UMINUS\n    exp : NUMBER\n    \n    exp : STRING\n    \n    exp : bool\n    bool : TRUE\n         | FALSE\n    \n    exp : IDENTIFIER\n    \n\n    rel_exp : exp GE exp\n            | exp GT exp\n            | exp LE exp\n            | exp LT exp\n            | exp EQUALEQUAL exp\n\n    \n    rel_exp : exp NOT EQUAL exp\n    stmt : MAYBE rel_exp compoundstmtstmt : MAYBE rel_exp compoundstmt OR compoundstmtcompoundstmt : LBRACE statements RBRACEstatements : stmt SEMICOLON statementsstatements : emptyyapl_mnm : MAYBE rel_exp compoundstmtyapl_mnm : MAYBE rel_exp compoundstmt OR compoundstmt'
    
_lr_action_items = {'MAYBE':([0,58,89,],[10,77,77,]),'MINUS':([0,2,10,11,12,13,14,15,21,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,39,40,46,47,48,49,50,51,52,53,54,55,56,58,59,60,62,63,65,70,77,78,79,83,85,86,89,91,92,98,],[11,26,11,11,-42,-43,-44,-47,-45,-46,11,11,11,11,11,-39,-40,11,11,11,11,11,26,-47,-41,11,-34,-35,-36,-37,-38,26,26,26,26,26,11,11,26,11,11,11,26,26,11,11,26,26,-43,-44,11,26,11,26,]),'NUMBER':([0,10,11,12,13,14,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,44,46,47,48,49,50,51,52,53,54,55,56,58,59,60,62,63,65,77,78,79,89,92,],[12,12,12,-42,-43,-44,-45,-46,12,12,12,12,12,-39,-40,12,12,12,12,12,-47,-41,12,64,-34,-35,-36,-37,-38,-48,-49,-50,-51,-52,12,12,-32,12,12,12,-53,12,12,-31,12,12,]),'STRING':([0,10,11,12,13,14,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,46,47,48,49,50,51,52,53,54,55,56,58,59,60,62,63,65,77,78,79,89,92,93,],[13,13,13,-42,-43,-44,-45,-46,13,13,13,13,13,-39,-40,13,13,13,13,13,-47,-41,13,-34,-35,-36,-37,-38,-48,-49,-50,-51,-52,13,13,-32,13,13,85,-53,13,13,-31,13,13,99,]),'IDENTIFIER':([0,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,46,47,48,49,50,51,52,53,54,55,56,58,59,60,62,63,65,77,78,79,89,92,],[15,38,38,-42,-43,-44,42,43,44,45,-45,-46,38,38,38,38,38,-39,-40,38,38,38,38,38,-47,-41,38,61,-34,-35,-36,-37,-38,-48,-49,-50,-51,-52,38,15,-32,38,38,38,-53,38,38,-31,15,38,]),'TIL':([0,58,89,],[16,16,16,]),'SUPPOSE':([0,41,58,89,],[17,17,17,17,]),'SNAKE':([0,58,89,],[18,18,18,]),'ACCESS':([0,58,89,],[19,19,19,]),'DISP':([0,58,89,],[20,20,20,]),'$end':([0,1,2,3,4,5,6,7,8,9,12,13,14,15,21,22,28,29,38,39,45,46,47,48,49,50,51,52,53,54,55,57,59,63,64,65,79,80,81,82,83,84,85,86,87,88,98,99,100,102,],[-30,0,-1,-2,-3,-4,-5,-6,-7,-8,-42,-43,-44,-47,-45,-46,-39,-40,-47,-41,-33,-34,-35,-36,-37,-38,-48,-49,-50,-51,-52,-59,-32,-30,-21,-53,-31,-18,-19,-20,-23,-24,-26,-29,-60,-56,-22,-25,-28,-9,]),'TRUE':([0,10,11,12,13,14,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,46,47,48,49,50,51,52,53,54,55,56,58,59,60,62,63,65,77,78,79,89,92,94,],[21,21,21,-42,-43,-44,-45,-46,21,21,21,21,21,-39,-40,21,21,21,21,21,-47,-41,21,-34,-35,-36,-37,-38,-48,-49,-50,-51,-52,21,21,-32,21,21,21,-53,21,21,-31,21,21,21,]),'FALSE':([0,10,11,12,13,14,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,46,47,48,49,50,51,52,53,54,55,56,58,59,60,62,63,65,77,78,79,89,92,94,],[22,22,22,-42,-43,-44,-45,-46,22,22,22,22,22,-39,-40,22,22,22,22,22,-47,-41,22,-34,-35,-36,-37,-38,-48,-49,-50,-51,-52,22,22,-32,22,22,22,-53,22,22,-31,22,22,22,]),'TIMES':([2,12,13,14,15,21,22,28,29,37,38,39,46,47,48,49,50,51,52,53,54,55,59,65,70,79,83,85,86,91,98,],[23,-42,-43,-44,-47,-45,-46,-39,-40,23,-47,-41,-34,-35,23,23,-38,23,23,23,23,23,23,23,23,23,23,-43,-44,23,23,]),'DIVIDE':([2,12,13,14,15,21,22,28,29,37,38,39,46,47,48,49,50,51,52,53,54,55,59,65,70,79,83,85,86,91,98,],[24,-42,-43,-44,-47,-45,-46,-39,-40,24,-47,-41,-34,-35,24,24,-38,24,24,24,24,24,24,24,24,24,24,-43,-44,24,24,]),'PLUS':([2,12,13,14,15,21,22,28,29,37,38,39,46,47,48,49,50,51,52,53,54,55,59,65,70,79,83,85,86,91,98,],[25,-42,-43,-44,-47,-45,-46,-39,-40,25,-47,-41,-34,-35,-36,-37,-38,25,25,25,25,25,25,25,25,25,25,-43,-44,25,25,]),'MOD':([2,12,13,14,15,21,22,28,29,37,38,39,46,47,48,49,50,51,52,53,54,55,59,65,70,79,83,85,86,91,98,],[27,-42,-43,-44,-47,-45,-46,-39,-40,27,-47,-41,-34,-35,27,27,-38,27,27,27,27,27,27,27,27,27,27,-43,-44,27,27,]),'PLUSPLUS':([2,12,13,14,15,21,22,28,29,37,38,39,46,47,48,49,50,51,52,53,54,55,59,65,70,79,83,85,86,91,98,],[28,-42,-43,-44,-47,-45,-46,-39,-40,28,-47,-41,-34,-35,-36,-37,-38,28,28,28,28,28,28,28,28,28,28,-43,-44,28,28,]),'MINUSMINUS':([2,12,13,14,15,21,22,28,29,37,38,39,46,47,48,49,50,51,52,53,54,55,59,65,70,79,83,85,86,91,98,],[29,-42,-43,-44,-47,-45,-46,-39,-40,29,-47,-41,-34,-35,-36,-37,-38,29,29,29,29,29,29,29,29,29,29,-43,-44,29,29,]),'GE':([2,12,13,14,15,21,22,28,29,37,38,39,46,47,48,49,50,70,],[30,-42,-43,-44,-47,-45,-46,-39,-40,30,-47,-41,-34,-35,-36,-37,-38,30,]),'GT':([2,12,13,14,15,21,22,28,29,37,38,39,46,47,48,49,50,70,],[31,-42,-43,-44,-47,-45,-46,-39,-40,31,-47,-41,-34,-35,-36,-37,-38,31,]),'LE':([2,12,13,14,15,21,22,28,29,37,38,39,46,47,48,49,50,70,],[32,-42,-43,-44,-47,-45,-46,-39,-40,32,-47,-41,-34,-35,-36,-37,-38,32,]),'LT':([2,12,13,14,15,21,22,28,29,37,38,39,46,47,48,49,50,70,],[33,-42,-43,-44,-47,-45,-46,-39,-40,33,-47,-41,-34,-35,-36,-37,-38,33,]),'EQUALEQUAL':([2,12,13,14,15,21,22,28,29,37,38,39,46,47,48,49,50,70,],[34,-42,-43,-44,-47,-45,-46,-39,-40,34,-47,-41,-34,-35,-36,-37,-38,34,]),'NOT':([2,12,13,14,15,21,22,28,29,37,38,39,46,47,48,49,50,70,],[35,-42,-43,-44,-47,-45,-46,-39,-40,35,-47,-41,-34,-35,-36,-37,-38,35,]),'LBRACE':([12,13,14,21,22,28,29,36,38,39,46,47,48,49,50,51,52,53,54,55,65,66,90,97,101,],[-42,-43,-44,-45,-46,-39,-40,58,-47,-41,-34,-35,-36,-37,-38,-48,-49,-50,-51,-52,-53,58,58,58,58,]),'SEMICOLON':([12,13,14,15,21,22,28,29,38,39,45,46,47,48,49,50,51,52,53,54,55,58,59,63,64,65,68,69,70,71,72,73,74,75,76,79,80,81,82,83,84,85,86,88,89,96,98,99,100,102,103,],[-42,-43,-44,-47,-45,-46,-39,-40,-47,-41,-33,-34,-35,-36,-37,-38,-48,-49,-50,-51,-52,-30,-32,-30,-21,-53,89,-17,-10,-11,-12,-13,-14,-15,-16,-31,-18,-19,-20,-23,-24,-26,-29,-56,-30,-54,-22,-25,-28,-9,-55,]),'COMMA':([12,13,14,21,22,28,29,38,39,46,47,48,49,50,63,80,81,82,83,84,85,86,98,99,100,],[-42,-43,-44,-45,-46,-39,-40,-47,-41,-34,-35,-36,-37,-38,-30,92,93,94,-23,-24,-26,-29,-22,-25,-28,]),'RPAREN':([12,13,14,21,22,28,29,38,39,46,47,48,49,50,91,],[-42,-43,-44,-45,-46,-39,-40,-47,-41,-34,-35,-36,-37,-38,97,]),'EQUAL':([15,35,42,43,61,],[40,56,62,63,40,]),'LPAREN':([16,],[41,]),'OR':([57,88,96,],[66,-56,101,]),'RBRACE':([58,67,69,89,95,],[-30,88,-58,-30,-57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'yapl_mnm':([0,],[1,]),'exp':([0,10,11,23,24,25,26,27,30,31,32,33,34,40,56,58,60,62,63,77,78,89,92,],[2,37,39,46,47,48,49,50,51,52,53,54,55,59,65,70,37,79,83,37,91,70,98,]),'til':([0,58,89,],[3,71,71,]),'assign_identifier':([0,41,58,89,],[4,60,72,72,]),'snake_list':([0,58,89,],[5,73,73,]),'snake_list_access':([0,58,89,],[6,74,74,]),'rel_exp':([0,10,58,60,77,89,],[7,36,75,78,90,75,]),'disp_var':([0,58,89,],[8,76,76,]),'empty':([0,58,63,89,],[9,69,84,69,]),'bool':([0,10,11,23,24,25,26,27,30,31,32,33,34,40,56,58,60,62,63,77,78,89,92,94,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,86,14,14,14,14,100,]),'compoundstmt':([36,66,90,97,101,],[57,87,96,102,103,]),'statements':([58,89,],[67,95,]),'stmt':([58,89,],[68,68,]),'num_snake':([63,],[80,]),'string_snake':([63,],[81,]),'bool_snake':([63,],[82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> yapl_mnm","S'",1,None,None,None),
  ('yapl_mnm -> exp','yapl_mnm',1,'p_yapl_mnm','yapl_mnm_parser.py',133),
  ('yapl_mnm -> til','yapl_mnm',1,'p_yapl_mnm','yapl_mnm_parser.py',134),
  ('yapl_mnm -> assign_identifier','yapl_mnm',1,'p_yapl_mnm','yapl_mnm_parser.py',135),
  ('yapl_mnm -> snake_list','yapl_mnm',1,'p_yapl_mnm','yapl_mnm_parser.py',136),
  ('yapl_mnm -> snake_list_access','yapl_mnm',1,'p_yapl_mnm','yapl_mnm_parser.py',137),
  ('yapl_mnm -> rel_exp','yapl_mnm',1,'p_yapl_mnm','yapl_mnm_parser.py',138),
  ('yapl_mnm -> disp_var','yapl_mnm',1,'p_yapl_mnm','yapl_mnm_parser.py',139),
  ('yapl_mnm -> empty','yapl_mnm',1,'p_yapl_mnm','yapl_mnm_parser.py',140),
  ('til -> TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt','til',7,'p_til_loop','yapl_mnm_parser.py',181),
  ('stmt -> exp','stmt',1,'p_stmt','yapl_mnm_parser.py',303),
  ('stmt -> til','stmt',1,'p_stmt','yapl_mnm_parser.py',304),
  ('stmt -> assign_identifier','stmt',1,'p_stmt','yapl_mnm_parser.py',305),
  ('stmt -> snake_list','stmt',1,'p_stmt','yapl_mnm_parser.py',306),
  ('stmt -> snake_list_access','stmt',1,'p_stmt','yapl_mnm_parser.py',307),
  ('stmt -> rel_exp','stmt',1,'p_stmt','yapl_mnm_parser.py',308),
  ('stmt -> disp_var','stmt',1,'p_stmt','yapl_mnm_parser.py',309),
  ('stmt -> empty','stmt',1,'p_stmt','yapl_mnm_parser.py',310),
  ('snake_list -> SNAKE IDENTIFIER EQUAL num_snake','snake_list',4,'p_intialize_snake','yapl_mnm_parser.py',316),
  ('snake_list -> SNAKE IDENTIFIER EQUAL string_snake','snake_list',4,'p_intialize_snake','yapl_mnm_parser.py',317),
  ('snake_list -> SNAKE IDENTIFIER EQUAL bool_snake','snake_list',4,'p_intialize_snake','yapl_mnm_parser.py',318),
  ('snake_list_access -> ACCESS IDENTIFIER NUMBER','snake_list_access',3,'p_access_snake','yapl_mnm_parser.py',324),
  ('num_snake -> num_snake COMMA exp','num_snake',3,'p_num_snake','yapl_mnm_parser.py',330),
  ('num_snake -> exp','num_snake',1,'p_num_snake','yapl_mnm_parser.py',331),
  ('num_snake -> empty','num_snake',1,'p_num_snake','yapl_mnm_parser.py',332),
  ('string_snake -> string_snake COMMA STRING','string_snake',3,'p_string_snake','yapl_mnm_parser.py',343),
  ('string_snake -> STRING','string_snake',1,'p_string_snake','yapl_mnm_parser.py',344),
  ('string_snake -> empty','string_snake',1,'p_string_snake','yapl_mnm_parser.py',345),
  ('bool_snake -> bool_snake COMMA bool','bool_snake',3,'p_bool_snake','yapl_mnm_parser.py',355),
  ('bool_snake -> bool','bool_snake',1,'p_bool_snake','yapl_mnm_parser.py',356),
  ('empty -> <empty>','empty',0,'p_empty','yapl_mnm_parser.py',365),
  ('assign_identifier -> SUPPOSE IDENTIFIER EQUAL exp','assign_identifier',4,'p_initialize_identifier','yapl_mnm_parser.py',371),
  ('assign_identifier -> IDENTIFIER EQUAL exp','assign_identifier',3,'p_assign_identifier','yapl_mnm_parser.py',378),
  ('disp_var -> DISP IDENTIFIER','disp_var',2,'p_disp_var','yapl_mnm_parser.py',388),
  ('exp -> exp TIMES exp','exp',3,'p_exp','yapl_mnm_parser.py',401),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp','yapl_mnm_parser.py',402),
  ('exp -> exp PLUS exp','exp',3,'p_exp','yapl_mnm_parser.py',403),
  ('exp -> exp MINUS exp','exp',3,'p_exp','yapl_mnm_parser.py',404),
  ('exp -> exp MOD exp','exp',3,'p_exp','yapl_mnm_parser.py',405),
  ('exp -> exp PLUSPLUS','exp',2,'p_exp_increment_decrement','yapl_mnm_parser.py',411),
  ('exp -> exp MINUSMINUS','exp',2,'p_exp_increment_decrement','yapl_mnm_parser.py',412),
  ('exp -> MINUS exp','exp',2,'p_exp_uminus','yapl_mnm_parser.py',417),
  ('exp -> NUMBER','exp',1,'p_exp_number','yapl_mnm_parser.py',423),
  ('exp -> STRING','exp',1,'p_exp_string','yapl_mnm_parser.py',430),
  ('exp -> bool','exp',1,'p_exp_bool','yapl_mnm_parser.py',437),
  ('bool -> TRUE','bool',1,'p_exp_bool','yapl_mnm_parser.py',438),
  ('bool -> FALSE','bool',1,'p_exp_bool','yapl_mnm_parser.py',439),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','yapl_mnm_parser.py',445),
  ('rel_exp -> exp GE exp','rel_exp',3,'p_rel_exp','yapl_mnm_parser.py',452),
  ('rel_exp -> exp GT exp','rel_exp',3,'p_rel_exp','yapl_mnm_parser.py',453),
  ('rel_exp -> exp LE exp','rel_exp',3,'p_rel_exp','yapl_mnm_parser.py',454),
  ('rel_exp -> exp LT exp','rel_exp',3,'p_rel_exp','yapl_mnm_parser.py',455),
  ('rel_exp -> exp EQUALEQUAL exp','rel_exp',3,'p_rel_exp','yapl_mnm_parser.py',456),
  ('rel_exp -> exp NOT EQUAL exp','rel_exp',4,'p_rel_exp_not_equal','yapl_mnm_parser.py',464),
  ('stmt -> MAYBE rel_exp compoundstmt','stmt',3,'p_stmt_if_then','yapl_mnm_parser.py',473),
  ('stmt -> MAYBE rel_exp compoundstmt OR compoundstmt','stmt',5,'p_stmt_if_then_else','yapl_mnm_parser.py',476),
  ('compoundstmt -> LBRACE statements RBRACE','compoundstmt',3,'p_compoundstmt','yapl_mnm_parser.py',481),
  ('statements -> stmt SEMICOLON statements','statements',3,'p_statements','yapl_mnm_parser.py',484),
  ('statements -> empty','statements',1,'p_statements_empty','yapl_mnm_parser.py',490),
  ('yapl_mnm -> MAYBE rel_exp compoundstmt','yapl_mnm',3,'p_yapl_if_then','yapl_mnm_parser.py',493),
  ('yapl_mnm -> MAYBE rel_exp compoundstmt OR compoundstmt','yapl_mnm',5,'p_yapl_if_then_else','yapl_mnm_parser.py',496),
]
