
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'yapl_mnmleftORORleftANDANDleftEQUALEQUALleftLTLEGTGEleftLPARENRPARENleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSrightNOTACCESS ANDAND COMMA COMPLEX DISP DISPL DIVIDE END EQUAL EQUALEQUAL EXPS FALSE FIRE G1 GE GT IDENTIFIER LBRACE LE LEAVE LPAREN LSQUAREPAREN LT MACHINE MAYBE MINUS MINUSMINUS MOD NOT NUMBER OR OROR PERFORM PLUS PLUSPLUS POP PUSH RBRACE RPAREN RSQUAREPAREN SEMICOLON SLICE SNAKE STRING SUPPOSE TIL TIMES TRUE UNTIL WORK\n    yapl_mnm : main_statement\n    stmt : LEAVE main_statement :  statements til : TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmtuntil : WORK compoundstmt UNTIL LPAREN rel_exp RPAREN\n    stmt :     exp\n             | til\n             | until\n             | assign_identifier\n             | snake_list\n             | snake_list_access\n             | rel_exp\n             | disp_var\n             | disp_string\n             | disp_list\n             | empty\n    \n    snake_list : SNAKE IDENTIFIER EQUAL num_snake\n               | SNAKE IDENTIFIER EQUAL string_snake\n               | SNAKE IDENTIFIER EQUAL bool_snake\n    \n    snake_list_access : ACCESS IDENTIFIER NUMBER\n    \n    num_snake : num_snake COMMA exp\n              | exp\n              | empty\n    \n    string_snake : string_snake COMMA STRING\n                 | STRING\n                 | empty\n    \n    bool_snake : bool_snake COMMA bool\n               | bool\n    empty :\n    assign_identifier : SUPPOSE IDENTIFIER EQUAL exp\n    \n    assign_identifier : IDENTIFIER EQUAL exp\n    \n    disp_var : DISP IDENTIFIER\n    \n    disp_string : DISP STRING\n    \n    disp_list : DISPL IDENTIFIER\n    \n    exp : exp TIMES exp\n        | exp DIVIDE exp\n        | exp PLUS exp\n        | exp MINUS exp\n        | exp MOD exp\n    \n    exp : exp PLUSPLUS\n        | exp MINUSMINUS\n    exp : MINUS exp %prec UMINUS\n    exp : NUMBER\n    \n    exp : STRING\n    \n    exp : bool\n    bool : TRUE\n         | FALSE\n    \n    exp : IDENTIFIER\n    \n\n    rel_exp : exp GE exp\n            | exp GT exp\n            | exp LE exp\n            | exp LT exp\n            | exp EQUALEQUAL exp\n\n    \n    rel_exp : exp NOT EQUAL exp\n    stmt : MAYBE rel_exp compoundstmtstmt : MAYBE rel_exp compoundstmt OR compoundstmtcompoundstmt : LBRACE statements RBRACEstatements : stmt SEMICOLON statementsstatements : emptymain_statement : MAYBE rel_exp compoundstmtmain_statement : MAYBE rel_exp compoundstmt OR compoundstmtmain_statement : POP IDENTIFIER NUMBERstmt : POP IDENTIFIER NUMBERmain_statement : IDENTIFIER PUSH NUMBERstmt : IDENTIFIER PUSH NUMBERmain_statement : IDENTIFIER SLICE NUMBER NUMBERstmt : IDENTIFIER SLICE NUMBER NUMBERstmt : IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBERstmt : MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmtoptparams : paramsoptparams : emptyparams : IDENTIFIER COMMA paramsparams : IDENTIFIER'
    
_lr_action_items = {'MAYBE':([0,41,59,],[4,73,73,]),'POP':([0,41,59,],[6,74,74,]),'IDENTIFIER':([0,4,6,8,21,22,23,24,27,28,29,30,31,32,33,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,57,59,71,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,102,107,108,109,111,125,129,],[7,36,37,-43,55,36,-44,-45,60,61,62,63,65,-46,-47,-48,70,75,36,36,36,36,36,-40,-41,36,36,36,36,36,-42,89,75,-31,36,99,-35,-36,-37,-38,-39,-49,-50,-51,-52,-53,36,103,36,36,36,-54,36,36,36,-30,103,36,]),'LEAVE':([0,41,59,],[11,11,11,]),'MACHINE':([0,41,59,],[21,21,21,]),'$end':([0,1,2,3,10,41,66,67,68,72,96,110,119,],[-29,0,-1,-3,-59,-29,-60,-62,-64,-58,-66,-57,-61,]),'SEMICOLON':([0,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24,32,33,36,41,47,48,56,59,63,64,65,66,67,68,70,71,75,76,77,78,79,80,81,82,83,84,85,93,94,96,102,110,111,112,113,114,115,116,117,118,119,121,122,123,132,134,136,138,139,140,141,142,143,],[-29,-12,-48,-43,41,-16,-2,-6,-7,-8,-9,-10,-11,-13,-14,-15,-44,-45,-46,-47,-48,-29,-40,-41,-42,-29,-32,-33,-34,-55,-63,-65,-48,-31,-48,-35,-36,-37,-38,-39,-49,-50,-51,-52,-53,-29,-20,-67,-54,-57,-30,-17,-18,-19,-22,-23,-25,-28,-56,-55,-63,-65,-68,-67,-69,-5,-21,-24,-27,-56,-4,]),'MINUS':([0,4,7,8,12,22,23,24,32,33,35,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,59,70,71,73,75,76,77,78,79,80,81,82,83,84,85,86,88,92,93,102,107,108,109,111,115,117,118,127,129,139,],[22,22,-48,-43,45,22,-44,-45,-46,-47,45,-48,22,22,22,22,22,22,22,-40,-41,22,22,22,22,22,-42,22,-48,45,22,-48,-35,-36,-37,-38,-39,45,45,45,45,45,22,22,22,22,45,22,22,22,45,45,-44,-45,45,22,45,]),'NUMBER':([0,4,8,22,23,24,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,59,62,69,71,73,76,77,78,79,80,81,82,83,84,85,86,88,92,93,97,99,100,101,102,107,108,109,111,120,124,129,],[8,8,-43,8,-44,-45,-46,-47,-48,67,68,69,8,8,8,8,8,8,8,-40,-41,8,8,8,8,8,-42,8,94,96,-31,8,-35,-36,-37,-38,-39,-49,-50,-51,-52,-53,8,8,8,8,120,122,123,124,-54,8,8,8,-30,132,134,8,]),'STRING':([0,4,8,22,23,24,30,32,33,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,59,71,73,76,77,78,79,80,81,82,83,84,85,86,88,92,93,102,107,108,109,111,129,130,],[23,23,-43,23,-44,-45,64,-46,-47,-48,23,23,23,23,23,23,23,-40,-41,23,23,23,23,23,-42,23,-31,23,-35,-36,-37,-38,-39,-49,-50,-51,-52,-53,23,23,23,117,-54,23,23,23,-30,23,140,]),'TIL':([0,41,59,],[25,25,25,]),'WORK':([0,41,59,],[26,26,26,]),'SUPPOSE':([0,41,57,59,],[27,27,27,27,]),'SNAKE':([0,41,59,],[28,28,28,]),'ACCESS':([0,41,59,],[29,29,29,]),'DISP':([0,41,59,],[30,30,30,]),'DISPL':([0,41,59,],[31,31,31,]),'TRUE':([0,4,8,22,23,24,32,33,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,59,71,73,76,77,78,79,80,81,82,83,84,85,86,88,92,93,102,107,108,109,111,129,131,],[32,32,-43,32,-44,-45,-46,-47,-48,32,32,32,32,32,32,32,-40,-41,32,32,32,32,32,-42,32,-31,32,-35,-36,-37,-38,-39,-49,-50,-51,-52,-53,32,32,32,32,-54,32,32,32,-30,32,32,]),'FALSE':([0,4,8,22,23,24,32,33,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,59,71,73,76,77,78,79,80,81,82,83,84,85,86,88,92,93,102,107,108,109,111,129,131,],[33,33,-43,33,-44,-45,-46,-47,-48,33,33,33,33,33,33,33,-40,-41,33,33,33,33,33,-42,33,-31,33,-35,-36,-37,-38,-39,-49,-50,-51,-52,-53,33,33,33,33,-54,33,33,33,-30,33,33,]),'PUSH':([7,75,],[38,100,]),'SLICE':([7,70,75,],[39,97,101,]),'EQUAL':([7,54,60,61,75,89,],[40,86,92,93,40,108,]),'TIMES':([7,8,12,23,24,32,33,35,36,47,48,56,70,71,75,76,77,78,79,80,81,82,83,84,85,102,111,115,117,118,127,139,],[-48,-43,42,-44,-45,-46,-47,42,-48,-40,-41,-42,-48,42,-48,-35,-36,42,42,-39,42,42,42,42,42,42,42,42,-44,-45,42,42,]),'DIVIDE':([7,8,12,23,24,32,33,35,36,47,48,56,70,71,75,76,77,78,79,80,81,82,83,84,85,102,111,115,117,118,127,139,],[-48,-43,43,-44,-45,-46,-47,43,-48,-40,-41,-42,-48,43,-48,-35,-36,43,43,-39,43,43,43,43,43,43,43,43,-44,-45,43,43,]),'PLUS':([7,8,12,23,24,32,33,35,36,47,48,56,70,71,75,76,77,78,79,80,81,82,83,84,85,102,111,115,117,118,127,139,],[-48,-43,44,-44,-45,-46,-47,44,-48,-40,-41,-42,-48,44,-48,-35,-36,-37,-38,-39,44,44,44,44,44,44,44,44,-44,-45,44,44,]),'MOD':([7,8,12,23,24,32,33,35,36,47,48,56,70,71,75,76,77,78,79,80,81,82,83,84,85,102,111,115,117,118,127,139,],[-48,-43,46,-44,-45,-46,-47,46,-48,-40,-41,-42,-48,46,-48,-35,-36,46,46,-39,46,46,46,46,46,46,46,46,-44,-45,46,46,]),'PLUSPLUS':([7,8,12,23,24,32,33,35,36,47,48,56,70,71,75,76,77,78,79,80,81,82,83,84,85,102,111,115,117,118,127,139,],[-48,-43,47,-44,-45,-46,-47,47,-48,-40,-41,-42,-48,47,-48,-35,-36,-37,-38,-39,47,47,47,47,47,47,47,47,-44,-45,47,47,]),'MINUSMINUS':([7,8,12,23,24,32,33,35,36,47,48,56,70,71,75,76,77,78,79,80,81,82,83,84,85,102,111,115,117,118,127,139,],[-48,-43,48,-44,-45,-46,-47,48,-48,-40,-41,-42,-48,48,-48,-35,-36,-37,-38,-39,48,48,48,48,48,48,48,48,-44,-45,48,48,]),'GE':([7,8,12,23,24,32,33,35,36,47,48,56,75,76,77,78,79,80,],[-48,-43,49,-44,-45,-46,-47,49,-48,-40,-41,-42,-48,-35,-36,-37,-38,-39,]),'GT':([7,8,12,23,24,32,33,35,36,47,48,56,75,76,77,78,79,80,],[-48,-43,50,-44,-45,-46,-47,50,-48,-40,-41,-42,-48,-35,-36,-37,-38,-39,]),'LE':([7,8,12,23,24,32,33,35,36,47,48,56,75,76,77,78,79,80,],[-48,-43,51,-44,-45,-46,-47,51,-48,-40,-41,-42,-48,-35,-36,-37,-38,-39,]),'LT':([7,8,12,23,24,32,33,35,36,47,48,56,75,76,77,78,79,80,],[-48,-43,52,-44,-45,-46,-47,52,-48,-40,-41,-42,-48,-35,-36,-37,-38,-39,]),'EQUALEQUAL':([7,8,12,23,24,32,33,35,36,47,48,56,75,76,77,78,79,80,],[-48,-43,53,-44,-45,-46,-47,53,-48,-40,-41,-42,-48,-35,-36,-37,-38,-39,]),'NOT':([7,8,12,23,24,32,33,35,36,47,48,56,75,76,77,78,79,80,],[-48,-43,54,-44,-45,-46,-47,54,-48,-40,-41,-42,-48,-35,-36,-37,-38,-39,]),'LBRACE':([8,23,24,26,32,33,34,36,47,48,56,76,77,78,79,80,81,82,83,84,85,95,98,102,126,133,137,],[-43,-44,-45,59,-46,-47,59,-48,-40,-41,-42,-35,-36,-37,-38,-39,-49,-50,-51,-52,-53,59,59,-54,59,59,59,]),'RPAREN':([8,23,24,32,33,36,47,48,56,76,77,78,79,80,81,82,83,84,85,87,102,103,104,105,106,127,128,135,],[-43,-44,-45,-46,-47,-48,-40,-41,-42,-35,-36,-37,-38,-39,-49,-50,-51,-52,-53,-29,-54,-73,126,-70,-71,137,138,-72,]),'COMMA':([8,23,24,32,33,36,47,48,56,76,77,78,79,80,93,103,112,113,114,115,116,117,118,139,140,141,],[-43,-44,-45,-46,-47,-48,-40,-41,-42,-35,-36,-37,-38,-39,-29,125,129,130,131,-22,-23,-25,-28,-21,-24,-27,]),'RBRACE':([10,41,59,72,91,],[-59,-29,-29,-58,110,]),'LPAREN':([25,55,90,],[57,87,109,]),'UNTIL':([58,110,],[90,-57,]),'OR':([66,110,121,],[95,-57,133,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'yapl_mnm':([0,],[1,]),'main_statement':([0,],[2,]),'statements':([0,41,59,],[3,72,91,]),'rel_exp':([0,4,41,59,73,88,109,],[5,34,5,5,98,107,128,]),'stmt':([0,41,59,],[9,9,9,]),'empty':([0,41,59,87,93,],[10,10,10,106,116,]),'exp':([0,4,22,40,41,42,43,44,45,46,49,50,51,52,53,59,73,86,88,92,93,107,108,109,129,],[12,35,56,71,12,76,77,78,79,80,81,82,83,84,85,12,35,102,35,111,115,127,71,35,139,]),'til':([0,41,59,],[13,13,13,]),'until':([0,41,59,],[14,14,14,]),'assign_identifier':([0,41,57,59,],[15,15,88,15,]),'snake_list':([0,41,59,],[16,16,16,]),'snake_list_access':([0,41,59,],[17,17,17,]),'disp_var':([0,41,59,],[18,18,18,]),'disp_string':([0,41,59,],[19,19,19,]),'disp_list':([0,41,59,],[20,20,20,]),'bool':([0,4,22,40,41,42,43,44,45,46,49,50,51,52,53,59,73,86,88,92,93,107,108,109,129,131,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,118,24,24,24,24,141,]),'compoundstmt':([26,34,95,98,126,133,137,],[58,66,119,121,136,142,143,]),'optparams':([87,],[104,]),'params':([87,125,],[105,135,]),'num_snake':([93,],[112,]),'string_snake':([93,],[113,]),'bool_snake':([93,],[114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> yapl_mnm","S'",1,None,None,None),
  ('yapl_mnm -> main_statement','yapl_mnm',1,'p_yapl_mnm','yapl_mnm_parser.py',85),
  ('stmt -> LEAVE','stmt',1,'p_stmt_break','yapl_mnm_parser.py',91),
  ('main_statement -> statements','main_statement',1,'p_main_statement','yapl_mnm_parser.py',96),
  ('til -> TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt','til',7,'p_til_loop','yapl_mnm_parser.py',100),
  ('until -> WORK compoundstmt UNTIL LPAREN rel_exp RPAREN','until',6,'p_work_until_loop','yapl_mnm_parser.py',105),
  ('stmt -> exp','stmt',1,'p_stmt','yapl_mnm_parser.py',110),
  ('stmt -> til','stmt',1,'p_stmt','yapl_mnm_parser.py',111),
  ('stmt -> until','stmt',1,'p_stmt','yapl_mnm_parser.py',112),
  ('stmt -> assign_identifier','stmt',1,'p_stmt','yapl_mnm_parser.py',113),
  ('stmt -> snake_list','stmt',1,'p_stmt','yapl_mnm_parser.py',114),
  ('stmt -> snake_list_access','stmt',1,'p_stmt','yapl_mnm_parser.py',115),
  ('stmt -> rel_exp','stmt',1,'p_stmt','yapl_mnm_parser.py',116),
  ('stmt -> disp_var','stmt',1,'p_stmt','yapl_mnm_parser.py',117),
  ('stmt -> disp_string','stmt',1,'p_stmt','yapl_mnm_parser.py',118),
  ('stmt -> disp_list','stmt',1,'p_stmt','yapl_mnm_parser.py',119),
  ('stmt -> empty','stmt',1,'p_stmt','yapl_mnm_parser.py',120),
  ('snake_list -> SNAKE IDENTIFIER EQUAL num_snake','snake_list',4,'p_intialize_snake','yapl_mnm_parser.py',126),
  ('snake_list -> SNAKE IDENTIFIER EQUAL string_snake','snake_list',4,'p_intialize_snake','yapl_mnm_parser.py',127),
  ('snake_list -> SNAKE IDENTIFIER EQUAL bool_snake','snake_list',4,'p_intialize_snake','yapl_mnm_parser.py',128),
  ('snake_list_access -> ACCESS IDENTIFIER NUMBER','snake_list_access',3,'p_access_snake','yapl_mnm_parser.py',139),
  ('num_snake -> num_snake COMMA exp','num_snake',3,'p_num_snake','yapl_mnm_parser.py',145),
  ('num_snake -> exp','num_snake',1,'p_num_snake','yapl_mnm_parser.py',146),
  ('num_snake -> empty','num_snake',1,'p_num_snake','yapl_mnm_parser.py',147),
  ('string_snake -> string_snake COMMA STRING','string_snake',3,'p_string_snake','yapl_mnm_parser.py',158),
  ('string_snake -> STRING','string_snake',1,'p_string_snake','yapl_mnm_parser.py',159),
  ('string_snake -> empty','string_snake',1,'p_string_snake','yapl_mnm_parser.py',160),
  ('bool_snake -> bool_snake COMMA bool','bool_snake',3,'p_bool_snake','yapl_mnm_parser.py',170),
  ('bool_snake -> bool','bool_snake',1,'p_bool_snake','yapl_mnm_parser.py',171),
  ('empty -> <empty>','empty',0,'p_empty','yapl_mnm_parser.py',180),
  ('assign_identifier -> SUPPOSE IDENTIFIER EQUAL exp','assign_identifier',4,'p_initialize_identifier','yapl_mnm_parser.py',185),
  ('assign_identifier -> IDENTIFIER EQUAL exp','assign_identifier',3,'p_assign_identifier','yapl_mnm_parser.py',191),
  ('disp_var -> DISP IDENTIFIER','disp_var',2,'p_disp_var','yapl_mnm_parser.py',197),
  ('disp_string -> DISP STRING','disp_string',2,'p_disp_string','yapl_mnm_parser.py',203),
  ('disp_list -> DISPL IDENTIFIER','disp_list',2,'p_disp_list','yapl_mnm_parser.py',209),
  ('exp -> exp TIMES exp','exp',3,'p_exp','yapl_mnm_parser.py',215),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp','yapl_mnm_parser.py',216),
  ('exp -> exp PLUS exp','exp',3,'p_exp','yapl_mnm_parser.py',217),
  ('exp -> exp MINUS exp','exp',3,'p_exp','yapl_mnm_parser.py',218),
  ('exp -> exp MOD exp','exp',3,'p_exp','yapl_mnm_parser.py',219),
  ('exp -> exp PLUSPLUS','exp',2,'p_exp_increment_decrement','yapl_mnm_parser.py',225),
  ('exp -> exp MINUSMINUS','exp',2,'p_exp_increment_decrement','yapl_mnm_parser.py',226),
  ('exp -> MINUS exp','exp',2,'p_exp_uminus','yapl_mnm_parser.py',231),
  ('exp -> NUMBER','exp',1,'p_exp_number','yapl_mnm_parser.py',237),
  ('exp -> STRING','exp',1,'p_exp_string','yapl_mnm_parser.py',244),
  ('exp -> bool','exp',1,'p_exp_bool','yapl_mnm_parser.py',251),
  ('bool -> TRUE','bool',1,'p_exp_bool','yapl_mnm_parser.py',252),
  ('bool -> FALSE','bool',1,'p_exp_bool','yapl_mnm_parser.py',253),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','yapl_mnm_parser.py',259),
  ('rel_exp -> exp GE exp','rel_exp',3,'p_rel_exp','yapl_mnm_parser.py',266),
  ('rel_exp -> exp GT exp','rel_exp',3,'p_rel_exp','yapl_mnm_parser.py',267),
  ('rel_exp -> exp LE exp','rel_exp',3,'p_rel_exp','yapl_mnm_parser.py',268),
  ('rel_exp -> exp LT exp','rel_exp',3,'p_rel_exp','yapl_mnm_parser.py',269),
  ('rel_exp -> exp EQUALEQUAL exp','rel_exp',3,'p_rel_exp','yapl_mnm_parser.py',270),
  ('rel_exp -> exp NOT EQUAL exp','rel_exp',4,'p_rel_exp_not_equal','yapl_mnm_parser.py',278),
  ('stmt -> MAYBE rel_exp compoundstmt','stmt',3,'p_stmt_if_then','yapl_mnm_parser.py',283),
  ('stmt -> MAYBE rel_exp compoundstmt OR compoundstmt','stmt',5,'p_stmt_if_then_else','yapl_mnm_parser.py',286),
  ('compoundstmt -> LBRACE statements RBRACE','compoundstmt',3,'p_compoundstmt','yapl_mnm_parser.py',290),
  ('statements -> stmt SEMICOLON statements','statements',3,'p_statements','yapl_mnm_parser.py',294),
  ('statements -> empty','statements',1,'p_statements_empty','yapl_mnm_parser.py',301),
  ('main_statement -> MAYBE rel_exp compoundstmt','main_statement',3,'p_yapl_if_then','yapl_mnm_parser.py',305),
  ('main_statement -> MAYBE rel_exp compoundstmt OR compoundstmt','main_statement',5,'p_yapl_if_then_else','yapl_mnm_parser.py',309),
  ('main_statement -> POP IDENTIFIER NUMBER','main_statement',3,'p_yapl_pop_list','yapl_mnm_parser.py',313),
  ('stmt -> POP IDENTIFIER NUMBER','stmt',3,'p_stmt_pop_list','yapl_mnm_parser.py',317),
  ('main_statement -> IDENTIFIER PUSH NUMBER','main_statement',3,'p_yapl_push_list','yapl_mnm_parser.py',321),
  ('stmt -> IDENTIFIER PUSH NUMBER','stmt',3,'p_stmt_push_list','yapl_mnm_parser.py',325),
  ('main_statement -> IDENTIFIER SLICE NUMBER NUMBER','main_statement',4,'p_yapl_slice_list','yapl_mnm_parser.py',329),
  ('stmt -> IDENTIFIER SLICE NUMBER NUMBER','stmt',4,'p_stmt_slice_list','yapl_mnm_parser.py',333),
  ('stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER','stmt',6,'p_stmt_slice_list_eq','yapl_mnm_parser.py',337),
  ('stmt -> MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt','stmt',6,'p_func_definition','yapl_mnm_parser.py',341),
  ('optparams -> params','optparams',1,'p_optparams','yapl_mnm_parser.py',345),
  ('optparams -> empty','optparams',1,'p_optparams_empty','yapl_mnm_parser.py',349),
  ('params -> IDENTIFIER COMMA params','params',3,'p_params','yapl_mnm_parser.py',353),
  ('params -> IDENTIFIER','params',1,'p_params_last','yapl_mnm_parser.py',357),
]
