Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ANDAND
    END
    EXPS
    G1
    LSQUAREPAREN
    OROR
    PERFORM
    RSQUAREPAREN

Grammar

Rule 0     S' -> yapl_mnm
Rule 1     yapl_mnm -> main_statement
Rule 2     stmt -> LEAVE
Rule 3     main_statement -> statements
Rule 4     til -> TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt
Rule 5     until -> WORK compoundstmt UNTIL LPAREN rel_exp RPAREN
Rule 6     stmt -> exp
Rule 7     stmt -> til
Rule 8     stmt -> until
Rule 9     stmt -> assign_identifier
Rule 10    stmt -> snake_list
Rule 11    stmt -> snake_list_access
Rule 12    stmt -> rel_exp
Rule 13    stmt -> disp_var
Rule 14    stmt -> disp_string
Rule 15    stmt -> disp_list
Rule 16    stmt -> empty
Rule 17    snake_list -> SNAKE IDENTIFIER EQUAL num_snake
Rule 18    snake_list -> SNAKE IDENTIFIER EQUAL string_snake
Rule 19    snake_list -> SNAKE IDENTIFIER EQUAL bool_snake
Rule 20    snake_list_access -> ACCESS IDENTIFIER NUMBER
Rule 21    num_snake -> num_snake COMMA exp
Rule 22    num_snake -> exp
Rule 23    num_snake -> empty
Rule 24    string_snake -> string_snake COMMA STRING
Rule 25    string_snake -> STRING
Rule 26    string_snake -> empty
Rule 27    bool_snake -> bool_snake COMMA bool
Rule 28    bool_snake -> bool
Rule 29    empty -> <empty>
Rule 30    assign_identifier -> SUPPOSE IDENTIFIER EQUAL stmt
Rule 31    assign_identifier -> SUPPOSE IDENTIFIER
Rule 32    assign_identifier -> IDENTIFIER EQUAL stmt
Rule 33    disp_var -> DISP IDENTIFIER
Rule 34    disp_string -> DISP STRING
Rule 35    disp_list -> DISPL IDENTIFIER
Rule 36    exp -> exp TIMES exp
Rule 37    exp -> exp DIVIDE exp
Rule 38    exp -> exp PLUS exp
Rule 39    exp -> exp MINUS exp
Rule 40    exp -> exp MOD exp
Rule 41    exp -> exp PLUSPLUS
Rule 42    exp -> exp MINUSMINUS
Rule 43    exp -> MINUS exp
Rule 44    exp -> NUMBER
Rule 45    exp -> STRING
Rule 46    exp -> bool
Rule 47    bool -> TRUE
Rule 48    bool -> FALSE
Rule 49    exp -> IDENTIFIER
Rule 50    rel_exp -> exp GE exp
Rule 51    rel_exp -> exp GT exp
Rule 52    rel_exp -> exp LE exp
Rule 53    rel_exp -> exp LT exp
Rule 54    rel_exp -> exp EQUALEQUAL exp
Rule 55    rel_exp -> exp NOT EQUAL exp
Rule 56    stmt -> MAYBE rel_exp compoundstmt
Rule 57    stmt -> MAYBE rel_exp compoundstmt OR compoundstmt
Rule 58    compoundstmt -> LBRACE statements RBRACE
Rule 59    statements -> stmt SEMICOLON statements
Rule 60    statements -> empty
Rule 61    main_statement -> MAYBE rel_exp compoundstmt
Rule 62    main_statement -> MAYBE rel_exp compoundstmt OR compoundstmt
Rule 63    main_statement -> POP IDENTIFIER NUMBER
Rule 64    stmt -> POP IDENTIFIER NUMBER
Rule 65    main_statement -> IDENTIFIER PUSH NUMBER
Rule 66    stmt -> IDENTIFIER PUSH NUMBER
Rule 67    main_statement -> IDENTIFIER SLICE NUMBER NUMBER
Rule 68    stmt -> IDENTIFIER SLICE NUMBER NUMBER
Rule 69    stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER
Rule 70    stmt -> MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt
Rule 71    optparams -> params
Rule 72    optparams -> empty
Rule 73    params -> stmt COMMA params
Rule 74    params -> stmt
Rule 75    stmt -> IDENTIFIER LPAREN optparams RPAREN
Rule 76    stmt -> FIRE stmt
Rule 77    stmt -> COMPLEX IDENTIFIER LBRACE attributes RBRACE
Rule 78    attributes -> IDENTIFIER SEMICOLON attributes
Rule 79    attributes -> IDENTIFIER SEMICOLON
Rule 80    attributes -> empty
Rule 81    stmt -> NEW IDENTIFIER IDENTIFIER
Rule 82    stmt -> IDENTIFIER ACCESS IDENTIFIER EQUAL exp
Rule 83    stmt -> DISP IDENTIFIER ACCESS IDENTIFIER
Rule 84    stmt -> IDENTIFIER ACCESS IDENTIFIER

Terminals, with rules where they appear

ACCESS               : 20 82 83 84
ANDAND               : 
COMMA                : 21 24 27 73
COMPLEX              : 77
DISP                 : 33 34 83
DISPL                : 35
DIVIDE               : 37
END                  : 
EQUAL                : 17 18 19 30 32 55 69 82
EQUALEQUAL           : 54
EXPS                 : 
FALSE                : 48
FIRE                 : 76
G1                   : 
GE                   : 50
GT                   : 51
IDENTIFIER           : 17 18 19 20 30 31 32 33 35 49 63 64 65 66 67 68 69 69 70 75 77 78 79 81 81 82 82 83 83 84 84
LBRACE               : 58 77
LE                   : 52
LEAVE                : 2
LPAREN               : 4 5 70 75
LSQUAREPAREN         : 
LT                   : 53
MACHINE              : 70
MAYBE                : 56 57 61 62
MINUS                : 39 43
MINUSMINUS           : 42
MOD                  : 40
NEW                  : 81
NOT                  : 55
NUMBER               : 20 44 63 64 65 66 67 67 68 68 69 69
OR                   : 57 62
OROR                 : 
PERFORM              : 
PLUS                 : 38
PLUSPLUS             : 41
POP                  : 63 64
PUSH                 : 65 66
RBRACE               : 58 77
RPAREN               : 4 5 70 75
RSQUAREPAREN         : 
SEMICOLON            : 59 78 79
SLICE                : 67 68 69
SNAKE                : 17 18 19
STRING               : 24 25 34 45
SUPPOSE              : 30 31
TIL                  : 4
TIMES                : 36
TRUE                 : 47
UNTIL                : 5
WORK                 : 5
error                : 

Nonterminals, with rules where they appear

assign_identifier    : 4 9
attributes           : 77 78
bool                 : 27 28 46
bool_snake           : 19 27
compoundstmt         : 4 5 56 57 57 61 62 62 70
disp_list            : 15
disp_string          : 14
disp_var             : 13
empty                : 16 23 26 60 72 80
exp                  : 4 6 21 22 36 36 37 37 38 38 39 39 40 40 41 42 43 50 50 51 51 52 52 53 53 54 54 55 55 82
main_statement       : 1
num_snake            : 17 21
optparams            : 70 75
params               : 71 73
rel_exp              : 4 5 12 56 57 61 62
snake_list           : 10
snake_list_access    : 11
statements           : 3 58 59
stmt                 : 30 32 59 73 74 76
string_snake         : 18 24
til                  : 7
until                : 8
yapl_mnm             : 0

Parsing method: LALR

state 0

    (0) S' -> . yapl_mnm
    (1) yapl_mnm -> . main_statement
    (3) main_statement -> . statements
    (61) main_statement -> . MAYBE rel_exp compoundstmt
    (62) main_statement -> . MAYBE rel_exp compoundstmt OR compoundstmt
    (63) main_statement -> . POP IDENTIFIER NUMBER
    (65) main_statement -> . IDENTIFIER PUSH NUMBER
    (67) main_statement -> . IDENTIFIER SLICE NUMBER NUMBER
    (59) statements -> . stmt SEMICOLON statements
    (60) statements -> . empty
    (2) stmt -> . LEAVE
    (6) stmt -> . exp
    (7) stmt -> . til
    (8) stmt -> . until
    (9) stmt -> . assign_identifier
    (10) stmt -> . snake_list
    (11) stmt -> . snake_list_access
    (12) stmt -> . rel_exp
    (13) stmt -> . disp_var
    (14) stmt -> . disp_string
    (15) stmt -> . disp_list
    (16) stmt -> . empty
    (56) stmt -> . MAYBE rel_exp compoundstmt
    (57) stmt -> . MAYBE rel_exp compoundstmt OR compoundstmt
    (64) stmt -> . POP IDENTIFIER NUMBER
    (66) stmt -> . IDENTIFIER PUSH NUMBER
    (68) stmt -> . IDENTIFIER SLICE NUMBER NUMBER
    (69) stmt -> . IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER
    (70) stmt -> . MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (75) stmt -> . IDENTIFIER LPAREN optparams RPAREN
    (76) stmt -> . FIRE stmt
    (77) stmt -> . COMPLEX IDENTIFIER LBRACE attributes RBRACE
    (81) stmt -> . NEW IDENTIFIER IDENTIFIER
    (82) stmt -> . IDENTIFIER ACCESS IDENTIFIER EQUAL exp
    (83) stmt -> . DISP IDENTIFIER ACCESS IDENTIFIER
    (84) stmt -> . IDENTIFIER ACCESS IDENTIFIER
    (29) empty -> .
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (4) til -> . TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt
    (5) until -> . WORK compoundstmt UNTIL LPAREN rel_exp RPAREN
    (30) assign_identifier -> . SUPPOSE IDENTIFIER EQUAL stmt
    (31) assign_identifier -> . SUPPOSE IDENTIFIER
    (32) assign_identifier -> . IDENTIFIER EQUAL stmt
    (17) snake_list -> . SNAKE IDENTIFIER EQUAL num_snake
    (18) snake_list -> . SNAKE IDENTIFIER EQUAL string_snake
    (19) snake_list -> . SNAKE IDENTIFIER EQUAL bool_snake
    (20) snake_list_access -> . ACCESS IDENTIFIER NUMBER
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (33) disp_var -> . DISP IDENTIFIER
    (34) disp_string -> . DISP STRING
    (35) disp_list -> . DISPL IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MAYBE           shift and go to state 4
    POP             shift and go to state 6
    IDENTIFIER      shift and go to state 7
    LEAVE           shift and go to state 11
    MACHINE         shift and go to state 21
    FIRE            shift and go to state 22
    COMPLEX         shift and go to state 23
    NEW             shift and go to state 24
    DISP            shift and go to state 26
    $end            reduce using rule 29 (empty -> .)
    SEMICOLON       reduce using rule 29 (empty -> .)
    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    TIL             shift and go to state 30
    WORK            shift and go to state 31
    SUPPOSE         shift and go to state 32
    SNAKE           shift and go to state 33
    ACCESS          shift and go to state 25
    DISPL           shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    yapl_mnm                       shift and go to state 1
    main_statement                 shift and go to state 2
    statements                     shift and go to state 3
    rel_exp                        shift and go to state 5
    stmt                           shift and go to state 9
    empty                          shift and go to state 10
    exp                            shift and go to state 12
    til                            shift and go to state 13
    until                          shift and go to state 14
    assign_identifier              shift and go to state 15
    snake_list                     shift and go to state 16
    snake_list_access              shift and go to state 17
    disp_var                       shift and go to state 18
    disp_string                    shift and go to state 19
    disp_list                      shift and go to state 20
    bool                           shift and go to state 29

state 1

    (0) S' -> yapl_mnm .



state 2

    (1) yapl_mnm -> main_statement .

    $end            reduce using rule 1 (yapl_mnm -> main_statement .)


state 3

    (3) main_statement -> statements .

    $end            reduce using rule 3 (main_statement -> statements .)


state 4

    (61) main_statement -> MAYBE . rel_exp compoundstmt
    (62) main_statement -> MAYBE . rel_exp compoundstmt OR compoundstmt
    (56) stmt -> MAYBE . rel_exp compoundstmt
    (57) stmt -> MAYBE . rel_exp compoundstmt OR compoundstmt
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    rel_exp                        shift and go to state 37
    exp                            shift and go to state 38
    bool                           shift and go to state 29

state 5

    (12) stmt -> rel_exp .

    SEMICOLON       reduce using rule 12 (stmt -> rel_exp .)
    COMMA           reduce using rule 12 (stmt -> rel_exp .)
    RPAREN          reduce using rule 12 (stmt -> rel_exp .)
    MINUS           reduce using rule 12 (stmt -> rel_exp .)
    NUMBER          reduce using rule 12 (stmt -> rel_exp .)
    STRING          reduce using rule 12 (stmt -> rel_exp .)
    IDENTIFIER      reduce using rule 12 (stmt -> rel_exp .)
    TRUE            reduce using rule 12 (stmt -> rel_exp .)
    FALSE           reduce using rule 12 (stmt -> rel_exp .)


state 6

    (63) main_statement -> POP . IDENTIFIER NUMBER
    (64) stmt -> POP . IDENTIFIER NUMBER

    IDENTIFIER      shift and go to state 40


state 7

    (65) main_statement -> IDENTIFIER . PUSH NUMBER
    (67) main_statement -> IDENTIFIER . SLICE NUMBER NUMBER
    (66) stmt -> IDENTIFIER . PUSH NUMBER
    (68) stmt -> IDENTIFIER . SLICE NUMBER NUMBER
    (69) stmt -> IDENTIFIER . EQUAL IDENTIFIER SLICE NUMBER NUMBER
    (75) stmt -> IDENTIFIER . LPAREN optparams RPAREN
    (82) stmt -> IDENTIFIER . ACCESS IDENTIFIER EQUAL exp
    (84) stmt -> IDENTIFIER . ACCESS IDENTIFIER
    (49) exp -> IDENTIFIER .
    (32) assign_identifier -> IDENTIFIER . EQUAL stmt

    PUSH            shift and go to state 41
    SLICE           shift and go to state 42
    EQUAL           shift and go to state 43
    LPAREN          shift and go to state 44
    ACCESS          shift and go to state 45
    TIMES           reduce using rule 49 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 49 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 49 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 49 (exp -> IDENTIFIER .)
    MOD             reduce using rule 49 (exp -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 49 (exp -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 49 (exp -> IDENTIFIER .)
    GE              reduce using rule 49 (exp -> IDENTIFIER .)
    GT              reduce using rule 49 (exp -> IDENTIFIER .)
    LE              reduce using rule 49 (exp -> IDENTIFIER .)
    LT              reduce using rule 49 (exp -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 49 (exp -> IDENTIFIER .)
    NOT             reduce using rule 49 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 49 (exp -> IDENTIFIER .)


state 8

    (44) exp -> NUMBER .

    TIMES           reduce using rule 44 (exp -> NUMBER .)
    DIVIDE          reduce using rule 44 (exp -> NUMBER .)
    PLUS            reduce using rule 44 (exp -> NUMBER .)
    MINUS           reduce using rule 44 (exp -> NUMBER .)
    MOD             reduce using rule 44 (exp -> NUMBER .)
    PLUSPLUS        reduce using rule 44 (exp -> NUMBER .)
    MINUSMINUS      reduce using rule 44 (exp -> NUMBER .)
    GE              reduce using rule 44 (exp -> NUMBER .)
    GT              reduce using rule 44 (exp -> NUMBER .)
    LE              reduce using rule 44 (exp -> NUMBER .)
    LT              reduce using rule 44 (exp -> NUMBER .)
    EQUALEQUAL      reduce using rule 44 (exp -> NUMBER .)
    NOT             reduce using rule 44 (exp -> NUMBER .)
    SEMICOLON       reduce using rule 44 (exp -> NUMBER .)
    COMMA           reduce using rule 44 (exp -> NUMBER .)
    RPAREN          reduce using rule 44 (exp -> NUMBER .)
    NUMBER          reduce using rule 44 (exp -> NUMBER .)
    STRING          reduce using rule 44 (exp -> NUMBER .)
    IDENTIFIER      reduce using rule 44 (exp -> NUMBER .)
    TRUE            reduce using rule 44 (exp -> NUMBER .)
    FALSE           reduce using rule 44 (exp -> NUMBER .)
    LBRACE          reduce using rule 44 (exp -> NUMBER .)


state 9

    (59) statements -> stmt . SEMICOLON statements

    SEMICOLON       shift and go to state 46


state 10

    (60) statements -> empty .
    (16) stmt -> empty .

    $end            reduce using rule 60 (statements -> empty .)
    RBRACE          reduce using rule 60 (statements -> empty .)
    SEMICOLON       reduce using rule 16 (stmt -> empty .)


state 11

    (2) stmt -> LEAVE .

    SEMICOLON       reduce using rule 2 (stmt -> LEAVE .)
    COMMA           reduce using rule 2 (stmt -> LEAVE .)
    RPAREN          reduce using rule 2 (stmt -> LEAVE .)
    MINUS           reduce using rule 2 (stmt -> LEAVE .)
    NUMBER          reduce using rule 2 (stmt -> LEAVE .)
    STRING          reduce using rule 2 (stmt -> LEAVE .)
    IDENTIFIER      reduce using rule 2 (stmt -> LEAVE .)
    TRUE            reduce using rule 2 (stmt -> LEAVE .)
    FALSE           reduce using rule 2 (stmt -> LEAVE .)


state 12

    (6) stmt -> exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS
    (50) rel_exp -> exp . GE exp
    (51) rel_exp -> exp . GT exp
    (52) rel_exp -> exp . LE exp
    (53) rel_exp -> exp . LT exp
    (54) rel_exp -> exp . EQUALEQUAL exp
    (55) rel_exp -> exp . NOT EQUAL exp

  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 6 (stmt -> exp .)
    COMMA           reduce using rule 6 (stmt -> exp .)
    RPAREN          reduce using rule 6 (stmt -> exp .)
    NUMBER          reduce using rule 6 (stmt -> exp .)
    STRING          reduce using rule 6 (stmt -> exp .)
    IDENTIFIER      reduce using rule 6 (stmt -> exp .)
    TRUE            reduce using rule 6 (stmt -> exp .)
    FALSE           reduce using rule 6 (stmt -> exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MOD             shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53
    GE              shift and go to state 54
    GT              shift and go to state 55
    LE              shift and go to state 56
    LT              shift and go to state 57
    EQUALEQUAL      shift and go to state 58
    NOT             shift and go to state 59

  ! MINUS           [ reduce using rule 6 (stmt -> exp .) ]


state 13

    (7) stmt -> til .

    SEMICOLON       reduce using rule 7 (stmt -> til .)
    COMMA           reduce using rule 7 (stmt -> til .)
    RPAREN          reduce using rule 7 (stmt -> til .)
    MINUS           reduce using rule 7 (stmt -> til .)
    NUMBER          reduce using rule 7 (stmt -> til .)
    STRING          reduce using rule 7 (stmt -> til .)
    IDENTIFIER      reduce using rule 7 (stmt -> til .)
    TRUE            reduce using rule 7 (stmt -> til .)
    FALSE           reduce using rule 7 (stmt -> til .)


state 14

    (8) stmt -> until .

    SEMICOLON       reduce using rule 8 (stmt -> until .)
    COMMA           reduce using rule 8 (stmt -> until .)
    RPAREN          reduce using rule 8 (stmt -> until .)
    MINUS           reduce using rule 8 (stmt -> until .)
    NUMBER          reduce using rule 8 (stmt -> until .)
    STRING          reduce using rule 8 (stmt -> until .)
    IDENTIFIER      reduce using rule 8 (stmt -> until .)
    TRUE            reduce using rule 8 (stmt -> until .)
    FALSE           reduce using rule 8 (stmt -> until .)


state 15

    (9) stmt -> assign_identifier .

    SEMICOLON       reduce using rule 9 (stmt -> assign_identifier .)
    COMMA           reduce using rule 9 (stmt -> assign_identifier .)
    RPAREN          reduce using rule 9 (stmt -> assign_identifier .)
    MINUS           reduce using rule 9 (stmt -> assign_identifier .)
    NUMBER          reduce using rule 9 (stmt -> assign_identifier .)
    STRING          reduce using rule 9 (stmt -> assign_identifier .)
    IDENTIFIER      reduce using rule 9 (stmt -> assign_identifier .)
    TRUE            reduce using rule 9 (stmt -> assign_identifier .)
    FALSE           reduce using rule 9 (stmt -> assign_identifier .)


state 16

    (10) stmt -> snake_list .

    SEMICOLON       reduce using rule 10 (stmt -> snake_list .)
    COMMA           reduce using rule 10 (stmt -> snake_list .)
    RPAREN          reduce using rule 10 (stmt -> snake_list .)
    MINUS           reduce using rule 10 (stmt -> snake_list .)
    NUMBER          reduce using rule 10 (stmt -> snake_list .)
    STRING          reduce using rule 10 (stmt -> snake_list .)
    IDENTIFIER      reduce using rule 10 (stmt -> snake_list .)
    TRUE            reduce using rule 10 (stmt -> snake_list .)
    FALSE           reduce using rule 10 (stmt -> snake_list .)


state 17

    (11) stmt -> snake_list_access .

    SEMICOLON       reduce using rule 11 (stmt -> snake_list_access .)
    COMMA           reduce using rule 11 (stmt -> snake_list_access .)
    RPAREN          reduce using rule 11 (stmt -> snake_list_access .)
    MINUS           reduce using rule 11 (stmt -> snake_list_access .)
    NUMBER          reduce using rule 11 (stmt -> snake_list_access .)
    STRING          reduce using rule 11 (stmt -> snake_list_access .)
    IDENTIFIER      reduce using rule 11 (stmt -> snake_list_access .)
    TRUE            reduce using rule 11 (stmt -> snake_list_access .)
    FALSE           reduce using rule 11 (stmt -> snake_list_access .)


state 18

    (13) stmt -> disp_var .

    SEMICOLON       reduce using rule 13 (stmt -> disp_var .)
    COMMA           reduce using rule 13 (stmt -> disp_var .)
    RPAREN          reduce using rule 13 (stmt -> disp_var .)
    MINUS           reduce using rule 13 (stmt -> disp_var .)
    NUMBER          reduce using rule 13 (stmt -> disp_var .)
    STRING          reduce using rule 13 (stmt -> disp_var .)
    IDENTIFIER      reduce using rule 13 (stmt -> disp_var .)
    TRUE            reduce using rule 13 (stmt -> disp_var .)
    FALSE           reduce using rule 13 (stmt -> disp_var .)


state 19

    (14) stmt -> disp_string .

    SEMICOLON       reduce using rule 14 (stmt -> disp_string .)
    COMMA           reduce using rule 14 (stmt -> disp_string .)
    RPAREN          reduce using rule 14 (stmt -> disp_string .)
    MINUS           reduce using rule 14 (stmt -> disp_string .)
    NUMBER          reduce using rule 14 (stmt -> disp_string .)
    STRING          reduce using rule 14 (stmt -> disp_string .)
    IDENTIFIER      reduce using rule 14 (stmt -> disp_string .)
    TRUE            reduce using rule 14 (stmt -> disp_string .)
    FALSE           reduce using rule 14 (stmt -> disp_string .)


state 20

    (15) stmt -> disp_list .

    SEMICOLON       reduce using rule 15 (stmt -> disp_list .)
    COMMA           reduce using rule 15 (stmt -> disp_list .)
    RPAREN          reduce using rule 15 (stmt -> disp_list .)
    MINUS           reduce using rule 15 (stmt -> disp_list .)
    NUMBER          reduce using rule 15 (stmt -> disp_list .)
    STRING          reduce using rule 15 (stmt -> disp_list .)
    IDENTIFIER      reduce using rule 15 (stmt -> disp_list .)
    TRUE            reduce using rule 15 (stmt -> disp_list .)
    FALSE           reduce using rule 15 (stmt -> disp_list .)


state 21

    (70) stmt -> MACHINE . IDENTIFIER LPAREN optparams RPAREN compoundstmt

    IDENTIFIER      shift and go to state 60


state 22

    (76) stmt -> FIRE . stmt
    (2) stmt -> . LEAVE
    (6) stmt -> . exp
    (7) stmt -> . til
    (8) stmt -> . until
    (9) stmt -> . assign_identifier
    (10) stmt -> . snake_list
    (11) stmt -> . snake_list_access
    (12) stmt -> . rel_exp
    (13) stmt -> . disp_var
    (14) stmt -> . disp_string
    (15) stmt -> . disp_list
    (16) stmt -> . empty
    (56) stmt -> . MAYBE rel_exp compoundstmt
    (57) stmt -> . MAYBE rel_exp compoundstmt OR compoundstmt
    (64) stmt -> . POP IDENTIFIER NUMBER
    (66) stmt -> . IDENTIFIER PUSH NUMBER
    (68) stmt -> . IDENTIFIER SLICE NUMBER NUMBER
    (69) stmt -> . IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER
    (70) stmt -> . MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (75) stmt -> . IDENTIFIER LPAREN optparams RPAREN
    (76) stmt -> . FIRE stmt
    (77) stmt -> . COMPLEX IDENTIFIER LBRACE attributes RBRACE
    (81) stmt -> . NEW IDENTIFIER IDENTIFIER
    (82) stmt -> . IDENTIFIER ACCESS IDENTIFIER EQUAL exp
    (83) stmt -> . DISP IDENTIFIER ACCESS IDENTIFIER
    (84) stmt -> . IDENTIFIER ACCESS IDENTIFIER
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (4) til -> . TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt
    (5) until -> . WORK compoundstmt UNTIL LPAREN rel_exp RPAREN
    (30) assign_identifier -> . SUPPOSE IDENTIFIER EQUAL stmt
    (31) assign_identifier -> . SUPPOSE IDENTIFIER
    (32) assign_identifier -> . IDENTIFIER EQUAL stmt
    (17) snake_list -> . SNAKE IDENTIFIER EQUAL num_snake
    (18) snake_list -> . SNAKE IDENTIFIER EQUAL string_snake
    (19) snake_list -> . SNAKE IDENTIFIER EQUAL bool_snake
    (20) snake_list_access -> . ACCESS IDENTIFIER NUMBER
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (33) disp_var -> . DISP IDENTIFIER
    (34) disp_string -> . DISP STRING
    (35) disp_list -> . DISPL IDENTIFIER
    (29) empty -> .
    (47) bool -> . TRUE
    (48) bool -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEAVE           shift and go to state 11
    MAYBE           shift and go to state 63
    POP             shift and go to state 64
    IDENTIFIER      shift and go to state 65
    MACHINE         shift and go to state 21
    FIRE            shift and go to state 22
    COMPLEX         shift and go to state 23
    NEW             shift and go to state 24
    DISP            shift and go to state 26
    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    TIL             shift and go to state 30
    WORK            shift and go to state 31
    SUPPOSE         shift and go to state 32
    SNAKE           shift and go to state 33
    ACCESS          shift and go to state 25
    DISPL           shift and go to state 34
    SEMICOLON       reduce using rule 29 (empty -> .)
    COMMA           reduce using rule 29 (empty -> .)
    RPAREN          reduce using rule 29 (empty -> .)
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

  ! MINUS           [ reduce using rule 29 (empty -> .) ]
  ! NUMBER          [ reduce using rule 29 (empty -> .) ]
  ! STRING          [ reduce using rule 29 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 29 (empty -> .) ]
  ! TRUE            [ reduce using rule 29 (empty -> .) ]
  ! FALSE           [ reduce using rule 29 (empty -> .) ]

    stmt                           shift and go to state 61
    exp                            shift and go to state 12
    til                            shift and go to state 13
    until                          shift and go to state 14
    assign_identifier              shift and go to state 15
    snake_list                     shift and go to state 16
    snake_list_access              shift and go to state 17
    rel_exp                        shift and go to state 5
    disp_var                       shift and go to state 18
    disp_string                    shift and go to state 19
    disp_list                      shift and go to state 20
    empty                          shift and go to state 62
    bool                           shift and go to state 29

state 23

    (77) stmt -> COMPLEX . IDENTIFIER LBRACE attributes RBRACE

    IDENTIFIER      shift and go to state 66


state 24

    (81) stmt -> NEW . IDENTIFIER IDENTIFIER

    IDENTIFIER      shift and go to state 67


state 25

    (20) snake_list_access -> ACCESS . IDENTIFIER NUMBER

    IDENTIFIER      shift and go to state 68


state 26

    (83) stmt -> DISP . IDENTIFIER ACCESS IDENTIFIER
    (33) disp_var -> DISP . IDENTIFIER
    (34) disp_string -> DISP . STRING

    IDENTIFIER      shift and go to state 69
    STRING          shift and go to state 70


state 27

    (43) exp -> MINUS . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 71
    bool                           shift and go to state 29

state 28

    (45) exp -> STRING .

    TIMES           reduce using rule 45 (exp -> STRING .)
    DIVIDE          reduce using rule 45 (exp -> STRING .)
    PLUS            reduce using rule 45 (exp -> STRING .)
    MINUS           reduce using rule 45 (exp -> STRING .)
    MOD             reduce using rule 45 (exp -> STRING .)
    PLUSPLUS        reduce using rule 45 (exp -> STRING .)
    MINUSMINUS      reduce using rule 45 (exp -> STRING .)
    GE              reduce using rule 45 (exp -> STRING .)
    GT              reduce using rule 45 (exp -> STRING .)
    LE              reduce using rule 45 (exp -> STRING .)
    LT              reduce using rule 45 (exp -> STRING .)
    EQUALEQUAL      reduce using rule 45 (exp -> STRING .)
    NOT             reduce using rule 45 (exp -> STRING .)
    SEMICOLON       reduce using rule 45 (exp -> STRING .)
    COMMA           reduce using rule 45 (exp -> STRING .)
    RPAREN          reduce using rule 45 (exp -> STRING .)
    NUMBER          reduce using rule 45 (exp -> STRING .)
    STRING          reduce using rule 45 (exp -> STRING .)
    IDENTIFIER      reduce using rule 45 (exp -> STRING .)
    TRUE            reduce using rule 45 (exp -> STRING .)
    FALSE           reduce using rule 45 (exp -> STRING .)
    LBRACE          reduce using rule 45 (exp -> STRING .)


state 29

    (46) exp -> bool .

    TIMES           reduce using rule 46 (exp -> bool .)
    DIVIDE          reduce using rule 46 (exp -> bool .)
    PLUS            reduce using rule 46 (exp -> bool .)
    MINUS           reduce using rule 46 (exp -> bool .)
    MOD             reduce using rule 46 (exp -> bool .)
    PLUSPLUS        reduce using rule 46 (exp -> bool .)
    MINUSMINUS      reduce using rule 46 (exp -> bool .)
    GE              reduce using rule 46 (exp -> bool .)
    GT              reduce using rule 46 (exp -> bool .)
    LE              reduce using rule 46 (exp -> bool .)
    LT              reduce using rule 46 (exp -> bool .)
    EQUALEQUAL      reduce using rule 46 (exp -> bool .)
    NOT             reduce using rule 46 (exp -> bool .)
    SEMICOLON       reduce using rule 46 (exp -> bool .)
    COMMA           reduce using rule 46 (exp -> bool .)
    RPAREN          reduce using rule 46 (exp -> bool .)
    NUMBER          reduce using rule 46 (exp -> bool .)
    STRING          reduce using rule 46 (exp -> bool .)
    IDENTIFIER      reduce using rule 46 (exp -> bool .)
    TRUE            reduce using rule 46 (exp -> bool .)
    FALSE           reduce using rule 46 (exp -> bool .)
    LBRACE          reduce using rule 46 (exp -> bool .)


state 30

    (4) til -> TIL . LPAREN assign_identifier rel_exp exp RPAREN compoundstmt

    LPAREN          shift and go to state 72


state 31

    (5) until -> WORK . compoundstmt UNTIL LPAREN rel_exp RPAREN
    (58) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 74

    compoundstmt                   shift and go to state 73

state 32

    (30) assign_identifier -> SUPPOSE . IDENTIFIER EQUAL stmt
    (31) assign_identifier -> SUPPOSE . IDENTIFIER

    IDENTIFIER      shift and go to state 75


state 33

    (17) snake_list -> SNAKE . IDENTIFIER EQUAL num_snake
    (18) snake_list -> SNAKE . IDENTIFIER EQUAL string_snake
    (19) snake_list -> SNAKE . IDENTIFIER EQUAL bool_snake

    IDENTIFIER      shift and go to state 76


state 34

    (35) disp_list -> DISPL . IDENTIFIER

    IDENTIFIER      shift and go to state 77


state 35

    (47) bool -> TRUE .

    TIMES           reduce using rule 47 (bool -> TRUE .)
    DIVIDE          reduce using rule 47 (bool -> TRUE .)
    PLUS            reduce using rule 47 (bool -> TRUE .)
    MINUS           reduce using rule 47 (bool -> TRUE .)
    MOD             reduce using rule 47 (bool -> TRUE .)
    PLUSPLUS        reduce using rule 47 (bool -> TRUE .)
    MINUSMINUS      reduce using rule 47 (bool -> TRUE .)
    GE              reduce using rule 47 (bool -> TRUE .)
    GT              reduce using rule 47 (bool -> TRUE .)
    LE              reduce using rule 47 (bool -> TRUE .)
    LT              reduce using rule 47 (bool -> TRUE .)
    EQUALEQUAL      reduce using rule 47 (bool -> TRUE .)
    NOT             reduce using rule 47 (bool -> TRUE .)
    SEMICOLON       reduce using rule 47 (bool -> TRUE .)
    COMMA           reduce using rule 47 (bool -> TRUE .)
    RPAREN          reduce using rule 47 (bool -> TRUE .)
    NUMBER          reduce using rule 47 (bool -> TRUE .)
    STRING          reduce using rule 47 (bool -> TRUE .)
    IDENTIFIER      reduce using rule 47 (bool -> TRUE .)
    TRUE            reduce using rule 47 (bool -> TRUE .)
    FALSE           reduce using rule 47 (bool -> TRUE .)
    LBRACE          reduce using rule 47 (bool -> TRUE .)


state 36

    (48) bool -> FALSE .

    TIMES           reduce using rule 48 (bool -> FALSE .)
    DIVIDE          reduce using rule 48 (bool -> FALSE .)
    PLUS            reduce using rule 48 (bool -> FALSE .)
    MINUS           reduce using rule 48 (bool -> FALSE .)
    MOD             reduce using rule 48 (bool -> FALSE .)
    PLUSPLUS        reduce using rule 48 (bool -> FALSE .)
    MINUSMINUS      reduce using rule 48 (bool -> FALSE .)
    GE              reduce using rule 48 (bool -> FALSE .)
    GT              reduce using rule 48 (bool -> FALSE .)
    LE              reduce using rule 48 (bool -> FALSE .)
    LT              reduce using rule 48 (bool -> FALSE .)
    EQUALEQUAL      reduce using rule 48 (bool -> FALSE .)
    NOT             reduce using rule 48 (bool -> FALSE .)
    SEMICOLON       reduce using rule 48 (bool -> FALSE .)
    COMMA           reduce using rule 48 (bool -> FALSE .)
    RPAREN          reduce using rule 48 (bool -> FALSE .)
    NUMBER          reduce using rule 48 (bool -> FALSE .)
    STRING          reduce using rule 48 (bool -> FALSE .)
    IDENTIFIER      reduce using rule 48 (bool -> FALSE .)
    TRUE            reduce using rule 48 (bool -> FALSE .)
    FALSE           reduce using rule 48 (bool -> FALSE .)
    LBRACE          reduce using rule 48 (bool -> FALSE .)


state 37

    (61) main_statement -> MAYBE rel_exp . compoundstmt
    (62) main_statement -> MAYBE rel_exp . compoundstmt OR compoundstmt
    (56) stmt -> MAYBE rel_exp . compoundstmt
    (57) stmt -> MAYBE rel_exp . compoundstmt OR compoundstmt
    (58) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 74

    compoundstmt                   shift and go to state 78

state 38

    (50) rel_exp -> exp . GE exp
    (51) rel_exp -> exp . GT exp
    (52) rel_exp -> exp . LE exp
    (53) rel_exp -> exp . LT exp
    (54) rel_exp -> exp . EQUALEQUAL exp
    (55) rel_exp -> exp . NOT EQUAL exp
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

    GE              shift and go to state 54
    GT              shift and go to state 55
    LE              shift and go to state 56
    LT              shift and go to state 57
    EQUALEQUAL      shift and go to state 58
    NOT             shift and go to state 59
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MOD             shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53


state 39

    (49) exp -> IDENTIFIER .

    GE              reduce using rule 49 (exp -> IDENTIFIER .)
    GT              reduce using rule 49 (exp -> IDENTIFIER .)
    LE              reduce using rule 49 (exp -> IDENTIFIER .)
    LT              reduce using rule 49 (exp -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 49 (exp -> IDENTIFIER .)
    NOT             reduce using rule 49 (exp -> IDENTIFIER .)
    TIMES           reduce using rule 49 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 49 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 49 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 49 (exp -> IDENTIFIER .)
    MOD             reduce using rule 49 (exp -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 49 (exp -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 49 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 49 (exp -> IDENTIFIER .)
    COMMA           reduce using rule 49 (exp -> IDENTIFIER .)
    RPAREN          reduce using rule 49 (exp -> IDENTIFIER .)
    NUMBER          reduce using rule 49 (exp -> IDENTIFIER .)
    STRING          reduce using rule 49 (exp -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 49 (exp -> IDENTIFIER .)
    TRUE            reduce using rule 49 (exp -> IDENTIFIER .)
    FALSE           reduce using rule 49 (exp -> IDENTIFIER .)
    LBRACE          reduce using rule 49 (exp -> IDENTIFIER .)


state 40

    (63) main_statement -> POP IDENTIFIER . NUMBER
    (64) stmt -> POP IDENTIFIER . NUMBER

    NUMBER          shift and go to state 79


state 41

    (65) main_statement -> IDENTIFIER PUSH . NUMBER
    (66) stmt -> IDENTIFIER PUSH . NUMBER

    NUMBER          shift and go to state 80


state 42

    (67) main_statement -> IDENTIFIER SLICE . NUMBER NUMBER
    (68) stmt -> IDENTIFIER SLICE . NUMBER NUMBER

    NUMBER          shift and go to state 81


state 43

    (69) stmt -> IDENTIFIER EQUAL . IDENTIFIER SLICE NUMBER NUMBER
    (32) assign_identifier -> IDENTIFIER EQUAL . stmt
    (2) stmt -> . LEAVE
    (6) stmt -> . exp
    (7) stmt -> . til
    (8) stmt -> . until
    (9) stmt -> . assign_identifier
    (10) stmt -> . snake_list
    (11) stmt -> . snake_list_access
    (12) stmt -> . rel_exp
    (13) stmt -> . disp_var
    (14) stmt -> . disp_string
    (15) stmt -> . disp_list
    (16) stmt -> . empty
    (56) stmt -> . MAYBE rel_exp compoundstmt
    (57) stmt -> . MAYBE rel_exp compoundstmt OR compoundstmt
    (64) stmt -> . POP IDENTIFIER NUMBER
    (66) stmt -> . IDENTIFIER PUSH NUMBER
    (68) stmt -> . IDENTIFIER SLICE NUMBER NUMBER
    (69) stmt -> . IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER
    (70) stmt -> . MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (75) stmt -> . IDENTIFIER LPAREN optparams RPAREN
    (76) stmt -> . FIRE stmt
    (77) stmt -> . COMPLEX IDENTIFIER LBRACE attributes RBRACE
    (81) stmt -> . NEW IDENTIFIER IDENTIFIER
    (82) stmt -> . IDENTIFIER ACCESS IDENTIFIER EQUAL exp
    (83) stmt -> . DISP IDENTIFIER ACCESS IDENTIFIER
    (84) stmt -> . IDENTIFIER ACCESS IDENTIFIER
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (4) til -> . TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt
    (5) until -> . WORK compoundstmt UNTIL LPAREN rel_exp RPAREN
    (30) assign_identifier -> . SUPPOSE IDENTIFIER EQUAL stmt
    (31) assign_identifier -> . SUPPOSE IDENTIFIER
    (32) assign_identifier -> . IDENTIFIER EQUAL stmt
    (17) snake_list -> . SNAKE IDENTIFIER EQUAL num_snake
    (18) snake_list -> . SNAKE IDENTIFIER EQUAL string_snake
    (19) snake_list -> . SNAKE IDENTIFIER EQUAL bool_snake
    (20) snake_list_access -> . ACCESS IDENTIFIER NUMBER
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (33) disp_var -> . DISP IDENTIFIER
    (34) disp_string -> . DISP STRING
    (35) disp_list -> . DISPL IDENTIFIER
    (29) empty -> .
    (47) bool -> . TRUE
    (48) bool -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    IDENTIFIER      shift and go to state 82
    LEAVE           shift and go to state 11
    MAYBE           shift and go to state 63
    POP             shift and go to state 64
    MACHINE         shift and go to state 21
    FIRE            shift and go to state 22
    COMPLEX         shift and go to state 23
    NEW             shift and go to state 24
    DISP            shift and go to state 26
    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    TIL             shift and go to state 30
    WORK            shift and go to state 31
    SUPPOSE         shift and go to state 32
    SNAKE           shift and go to state 33
    ACCESS          shift and go to state 25
    DISPL           shift and go to state 34
    SEMICOLON       reduce using rule 29 (empty -> .)
    COMMA           reduce using rule 29 (empty -> .)
    RPAREN          reduce using rule 29 (empty -> .)
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

  ! MINUS           [ reduce using rule 29 (empty -> .) ]
  ! NUMBER          [ reduce using rule 29 (empty -> .) ]
  ! STRING          [ reduce using rule 29 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 29 (empty -> .) ]
  ! TRUE            [ reduce using rule 29 (empty -> .) ]
  ! FALSE           [ reduce using rule 29 (empty -> .) ]

    stmt                           shift and go to state 83
    exp                            shift and go to state 12
    til                            shift and go to state 13
    until                          shift and go to state 14
    assign_identifier              shift and go to state 15
    snake_list                     shift and go to state 16
    snake_list_access              shift and go to state 17
    rel_exp                        shift and go to state 5
    disp_var                       shift and go to state 18
    disp_string                    shift and go to state 19
    disp_list                      shift and go to state 20
    empty                          shift and go to state 62
    bool                           shift and go to state 29

state 44

    (75) stmt -> IDENTIFIER LPAREN . optparams RPAREN
    (71) optparams -> . params
    (72) optparams -> . empty
    (73) params -> . stmt COMMA params
    (74) params -> . stmt
    (29) empty -> .
    (2) stmt -> . LEAVE
    (6) stmt -> . exp
    (7) stmt -> . til
    (8) stmt -> . until
    (9) stmt -> . assign_identifier
    (10) stmt -> . snake_list
    (11) stmt -> . snake_list_access
    (12) stmt -> . rel_exp
    (13) stmt -> . disp_var
    (14) stmt -> . disp_string
    (15) stmt -> . disp_list
    (16) stmt -> . empty
    (56) stmt -> . MAYBE rel_exp compoundstmt
    (57) stmt -> . MAYBE rel_exp compoundstmt OR compoundstmt
    (64) stmt -> . POP IDENTIFIER NUMBER
    (66) stmt -> . IDENTIFIER PUSH NUMBER
    (68) stmt -> . IDENTIFIER SLICE NUMBER NUMBER
    (69) stmt -> . IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER
    (70) stmt -> . MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (75) stmt -> . IDENTIFIER LPAREN optparams RPAREN
    (76) stmt -> . FIRE stmt
    (77) stmt -> . COMPLEX IDENTIFIER LBRACE attributes RBRACE
    (81) stmt -> . NEW IDENTIFIER IDENTIFIER
    (82) stmt -> . IDENTIFIER ACCESS IDENTIFIER EQUAL exp
    (83) stmt -> . DISP IDENTIFIER ACCESS IDENTIFIER
    (84) stmt -> . IDENTIFIER ACCESS IDENTIFIER
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (4) til -> . TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt
    (5) until -> . WORK compoundstmt UNTIL LPAREN rel_exp RPAREN
    (30) assign_identifier -> . SUPPOSE IDENTIFIER EQUAL stmt
    (31) assign_identifier -> . SUPPOSE IDENTIFIER
    (32) assign_identifier -> . IDENTIFIER EQUAL stmt
    (17) snake_list -> . SNAKE IDENTIFIER EQUAL num_snake
    (18) snake_list -> . SNAKE IDENTIFIER EQUAL string_snake
    (19) snake_list -> . SNAKE IDENTIFIER EQUAL bool_snake
    (20) snake_list_access -> . ACCESS IDENTIFIER NUMBER
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (33) disp_var -> . DISP IDENTIFIER
    (34) disp_string -> . DISP STRING
    (35) disp_list -> . DISPL IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    RPAREN          reduce using rule 29 (empty -> .)
    COMMA           reduce using rule 29 (empty -> .)
    LEAVE           shift and go to state 11
    MAYBE           shift and go to state 63
    POP             shift and go to state 64
    IDENTIFIER      shift and go to state 65
    MACHINE         shift and go to state 21
    FIRE            shift and go to state 22
    COMPLEX         shift and go to state 23
    NEW             shift and go to state 24
    DISP            shift and go to state 26
    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    TIL             shift and go to state 30
    WORK            shift and go to state 31
    SUPPOSE         shift and go to state 32
    SNAKE           shift and go to state 33
    ACCESS          shift and go to state 25
    DISPL           shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    optparams                      shift and go to state 84
    params                         shift and go to state 85
    empty                          shift and go to state 86
    stmt                           shift and go to state 87
    exp                            shift and go to state 12
    til                            shift and go to state 13
    until                          shift and go to state 14
    assign_identifier              shift and go to state 15
    snake_list                     shift and go to state 16
    snake_list_access              shift and go to state 17
    rel_exp                        shift and go to state 5
    disp_var                       shift and go to state 18
    disp_string                    shift and go to state 19
    disp_list                      shift and go to state 20
    bool                           shift and go to state 29

state 45

    (82) stmt -> IDENTIFIER ACCESS . IDENTIFIER EQUAL exp
    (84) stmt -> IDENTIFIER ACCESS . IDENTIFIER

    IDENTIFIER      shift and go to state 88


state 46

    (59) statements -> stmt SEMICOLON . statements
    (59) statements -> . stmt SEMICOLON statements
    (60) statements -> . empty
    (2) stmt -> . LEAVE
    (6) stmt -> . exp
    (7) stmt -> . til
    (8) stmt -> . until
    (9) stmt -> . assign_identifier
    (10) stmt -> . snake_list
    (11) stmt -> . snake_list_access
    (12) stmt -> . rel_exp
    (13) stmt -> . disp_var
    (14) stmt -> . disp_string
    (15) stmt -> . disp_list
    (16) stmt -> . empty
    (56) stmt -> . MAYBE rel_exp compoundstmt
    (57) stmt -> . MAYBE rel_exp compoundstmt OR compoundstmt
    (64) stmt -> . POP IDENTIFIER NUMBER
    (66) stmt -> . IDENTIFIER PUSH NUMBER
    (68) stmt -> . IDENTIFIER SLICE NUMBER NUMBER
    (69) stmt -> . IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER
    (70) stmt -> . MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (75) stmt -> . IDENTIFIER LPAREN optparams RPAREN
    (76) stmt -> . FIRE stmt
    (77) stmt -> . COMPLEX IDENTIFIER LBRACE attributes RBRACE
    (81) stmt -> . NEW IDENTIFIER IDENTIFIER
    (82) stmt -> . IDENTIFIER ACCESS IDENTIFIER EQUAL exp
    (83) stmt -> . DISP IDENTIFIER ACCESS IDENTIFIER
    (84) stmt -> . IDENTIFIER ACCESS IDENTIFIER
    (29) empty -> .
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (4) til -> . TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt
    (5) until -> . WORK compoundstmt UNTIL LPAREN rel_exp RPAREN
    (30) assign_identifier -> . SUPPOSE IDENTIFIER EQUAL stmt
    (31) assign_identifier -> . SUPPOSE IDENTIFIER
    (32) assign_identifier -> . IDENTIFIER EQUAL stmt
    (17) snake_list -> . SNAKE IDENTIFIER EQUAL num_snake
    (18) snake_list -> . SNAKE IDENTIFIER EQUAL string_snake
    (19) snake_list -> . SNAKE IDENTIFIER EQUAL bool_snake
    (20) snake_list_access -> . ACCESS IDENTIFIER NUMBER
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (33) disp_var -> . DISP IDENTIFIER
    (34) disp_string -> . DISP STRING
    (35) disp_list -> . DISPL IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    LEAVE           shift and go to state 11
    MAYBE           shift and go to state 63
    POP             shift and go to state 64
    IDENTIFIER      shift and go to state 65
    MACHINE         shift and go to state 21
    FIRE            shift and go to state 22
    COMPLEX         shift and go to state 23
    NEW             shift and go to state 24
    DISP            shift and go to state 26
    $end            reduce using rule 29 (empty -> .)
    RBRACE          reduce using rule 29 (empty -> .)
    SEMICOLON       reduce using rule 29 (empty -> .)
    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    TIL             shift and go to state 30
    WORK            shift and go to state 31
    SUPPOSE         shift and go to state 32
    SNAKE           shift and go to state 33
    ACCESS          shift and go to state 25
    DISPL           shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    stmt                           shift and go to state 9
    statements                     shift and go to state 89
    empty                          shift and go to state 10
    exp                            shift and go to state 12
    til                            shift and go to state 13
    until                          shift and go to state 14
    assign_identifier              shift and go to state 15
    snake_list                     shift and go to state 16
    snake_list_access              shift and go to state 17
    rel_exp                        shift and go to state 5
    disp_var                       shift and go to state 18
    disp_string                    shift and go to state 19
    disp_list                      shift and go to state 20
    bool                           shift and go to state 29

state 47

    (36) exp -> exp TIMES . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 90
    bool                           shift and go to state 29

state 48

    (37) exp -> exp DIVIDE . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 91
    bool                           shift and go to state 29

state 49

    (38) exp -> exp PLUS . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 92
    bool                           shift and go to state 29

state 50

    (39) exp -> exp MINUS . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 93
    bool                           shift and go to state 29

state 51

    (40) exp -> exp MOD . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 94
    bool                           shift and go to state 29

state 52

    (41) exp -> exp PLUSPLUS .

    TIMES           reduce using rule 41 (exp -> exp PLUSPLUS .)
    DIVIDE          reduce using rule 41 (exp -> exp PLUSPLUS .)
    PLUS            reduce using rule 41 (exp -> exp PLUSPLUS .)
    MINUS           reduce using rule 41 (exp -> exp PLUSPLUS .)
    MOD             reduce using rule 41 (exp -> exp PLUSPLUS .)
    PLUSPLUS        reduce using rule 41 (exp -> exp PLUSPLUS .)
    MINUSMINUS      reduce using rule 41 (exp -> exp PLUSPLUS .)
    GE              reduce using rule 41 (exp -> exp PLUSPLUS .)
    GT              reduce using rule 41 (exp -> exp PLUSPLUS .)
    LE              reduce using rule 41 (exp -> exp PLUSPLUS .)
    LT              reduce using rule 41 (exp -> exp PLUSPLUS .)
    EQUALEQUAL      reduce using rule 41 (exp -> exp PLUSPLUS .)
    NOT             reduce using rule 41 (exp -> exp PLUSPLUS .)
    SEMICOLON       reduce using rule 41 (exp -> exp PLUSPLUS .)
    COMMA           reduce using rule 41 (exp -> exp PLUSPLUS .)
    RPAREN          reduce using rule 41 (exp -> exp PLUSPLUS .)
    NUMBER          reduce using rule 41 (exp -> exp PLUSPLUS .)
    STRING          reduce using rule 41 (exp -> exp PLUSPLUS .)
    IDENTIFIER      reduce using rule 41 (exp -> exp PLUSPLUS .)
    TRUE            reduce using rule 41 (exp -> exp PLUSPLUS .)
    FALSE           reduce using rule 41 (exp -> exp PLUSPLUS .)
    LBRACE          reduce using rule 41 (exp -> exp PLUSPLUS .)


state 53

    (42) exp -> exp MINUSMINUS .

    TIMES           reduce using rule 42 (exp -> exp MINUSMINUS .)
    DIVIDE          reduce using rule 42 (exp -> exp MINUSMINUS .)
    PLUS            reduce using rule 42 (exp -> exp MINUSMINUS .)
    MINUS           reduce using rule 42 (exp -> exp MINUSMINUS .)
    MOD             reduce using rule 42 (exp -> exp MINUSMINUS .)
    PLUSPLUS        reduce using rule 42 (exp -> exp MINUSMINUS .)
    MINUSMINUS      reduce using rule 42 (exp -> exp MINUSMINUS .)
    GE              reduce using rule 42 (exp -> exp MINUSMINUS .)
    GT              reduce using rule 42 (exp -> exp MINUSMINUS .)
    LE              reduce using rule 42 (exp -> exp MINUSMINUS .)
    LT              reduce using rule 42 (exp -> exp MINUSMINUS .)
    EQUALEQUAL      reduce using rule 42 (exp -> exp MINUSMINUS .)
    NOT             reduce using rule 42 (exp -> exp MINUSMINUS .)
    SEMICOLON       reduce using rule 42 (exp -> exp MINUSMINUS .)
    COMMA           reduce using rule 42 (exp -> exp MINUSMINUS .)
    RPAREN          reduce using rule 42 (exp -> exp MINUSMINUS .)
    NUMBER          reduce using rule 42 (exp -> exp MINUSMINUS .)
    STRING          reduce using rule 42 (exp -> exp MINUSMINUS .)
    IDENTIFIER      reduce using rule 42 (exp -> exp MINUSMINUS .)
    TRUE            reduce using rule 42 (exp -> exp MINUSMINUS .)
    FALSE           reduce using rule 42 (exp -> exp MINUSMINUS .)
    LBRACE          reduce using rule 42 (exp -> exp MINUSMINUS .)


state 54

    (50) rel_exp -> exp GE . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 95
    bool                           shift and go to state 29

state 55

    (51) rel_exp -> exp GT . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 96
    bool                           shift and go to state 29

state 56

    (52) rel_exp -> exp LE . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 97
    bool                           shift and go to state 29

state 57

    (53) rel_exp -> exp LT . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 98
    bool                           shift and go to state 29

state 58

    (54) rel_exp -> exp EQUALEQUAL . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 99
    bool                           shift and go to state 29

state 59

    (55) rel_exp -> exp NOT . EQUAL exp

    EQUAL           shift and go to state 100


state 60

    (70) stmt -> MACHINE IDENTIFIER . LPAREN optparams RPAREN compoundstmt

    LPAREN          shift and go to state 101


state 61

    (76) stmt -> FIRE stmt .

    SEMICOLON       reduce using rule 76 (stmt -> FIRE stmt .)
    COMMA           reduce using rule 76 (stmt -> FIRE stmt .)
    RPAREN          reduce using rule 76 (stmt -> FIRE stmt .)
    MINUS           reduce using rule 76 (stmt -> FIRE stmt .)
    NUMBER          reduce using rule 76 (stmt -> FIRE stmt .)
    STRING          reduce using rule 76 (stmt -> FIRE stmt .)
    IDENTIFIER      reduce using rule 76 (stmt -> FIRE stmt .)
    TRUE            reduce using rule 76 (stmt -> FIRE stmt .)
    FALSE           reduce using rule 76 (stmt -> FIRE stmt .)


state 62

    (16) stmt -> empty .

    SEMICOLON       reduce using rule 16 (stmt -> empty .)
    COMMA           reduce using rule 16 (stmt -> empty .)
    RPAREN          reduce using rule 16 (stmt -> empty .)
    MINUS           reduce using rule 16 (stmt -> empty .)
    NUMBER          reduce using rule 16 (stmt -> empty .)
    STRING          reduce using rule 16 (stmt -> empty .)
    IDENTIFIER      reduce using rule 16 (stmt -> empty .)
    TRUE            reduce using rule 16 (stmt -> empty .)
    FALSE           reduce using rule 16 (stmt -> empty .)


state 63

    (56) stmt -> MAYBE . rel_exp compoundstmt
    (57) stmt -> MAYBE . rel_exp compoundstmt OR compoundstmt
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    rel_exp                        shift and go to state 102
    exp                            shift and go to state 38
    bool                           shift and go to state 29

state 64

    (64) stmt -> POP . IDENTIFIER NUMBER

    IDENTIFIER      shift and go to state 103


state 65

    (66) stmt -> IDENTIFIER . PUSH NUMBER
    (68) stmt -> IDENTIFIER . SLICE NUMBER NUMBER
    (69) stmt -> IDENTIFIER . EQUAL IDENTIFIER SLICE NUMBER NUMBER
    (75) stmt -> IDENTIFIER . LPAREN optparams RPAREN
    (82) stmt -> IDENTIFIER . ACCESS IDENTIFIER EQUAL exp
    (84) stmt -> IDENTIFIER . ACCESS IDENTIFIER
    (49) exp -> IDENTIFIER .
    (32) assign_identifier -> IDENTIFIER . EQUAL stmt

    PUSH            shift and go to state 104
    SLICE           shift and go to state 105
    EQUAL           shift and go to state 43
    LPAREN          shift and go to state 44
    ACCESS          shift and go to state 45
    TIMES           reduce using rule 49 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 49 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 49 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 49 (exp -> IDENTIFIER .)
    MOD             reduce using rule 49 (exp -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 49 (exp -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 49 (exp -> IDENTIFIER .)
    GE              reduce using rule 49 (exp -> IDENTIFIER .)
    GT              reduce using rule 49 (exp -> IDENTIFIER .)
    LE              reduce using rule 49 (exp -> IDENTIFIER .)
    LT              reduce using rule 49 (exp -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 49 (exp -> IDENTIFIER .)
    NOT             reduce using rule 49 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 49 (exp -> IDENTIFIER .)
    COMMA           reduce using rule 49 (exp -> IDENTIFIER .)
    RPAREN          reduce using rule 49 (exp -> IDENTIFIER .)
    NUMBER          reduce using rule 49 (exp -> IDENTIFIER .)
    STRING          reduce using rule 49 (exp -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 49 (exp -> IDENTIFIER .)
    TRUE            reduce using rule 49 (exp -> IDENTIFIER .)
    FALSE           reduce using rule 49 (exp -> IDENTIFIER .)


state 66

    (77) stmt -> COMPLEX IDENTIFIER . LBRACE attributes RBRACE

    LBRACE          shift and go to state 106


state 67

    (81) stmt -> NEW IDENTIFIER . IDENTIFIER

    IDENTIFIER      shift and go to state 107


state 68

    (20) snake_list_access -> ACCESS IDENTIFIER . NUMBER

    NUMBER          shift and go to state 108


state 69

    (83) stmt -> DISP IDENTIFIER . ACCESS IDENTIFIER
    (33) disp_var -> DISP IDENTIFIER .

    ACCESS          shift and go to state 109
    SEMICOLON       reduce using rule 33 (disp_var -> DISP IDENTIFIER .)
    COMMA           reduce using rule 33 (disp_var -> DISP IDENTIFIER .)
    RPAREN          reduce using rule 33 (disp_var -> DISP IDENTIFIER .)
    MINUS           reduce using rule 33 (disp_var -> DISP IDENTIFIER .)
    NUMBER          reduce using rule 33 (disp_var -> DISP IDENTIFIER .)
    STRING          reduce using rule 33 (disp_var -> DISP IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (disp_var -> DISP IDENTIFIER .)
    TRUE            reduce using rule 33 (disp_var -> DISP IDENTIFIER .)
    FALSE           reduce using rule 33 (disp_var -> DISP IDENTIFIER .)


state 70

    (34) disp_string -> DISP STRING .

    SEMICOLON       reduce using rule 34 (disp_string -> DISP STRING .)
    COMMA           reduce using rule 34 (disp_string -> DISP STRING .)
    RPAREN          reduce using rule 34 (disp_string -> DISP STRING .)
    MINUS           reduce using rule 34 (disp_string -> DISP STRING .)
    NUMBER          reduce using rule 34 (disp_string -> DISP STRING .)
    STRING          reduce using rule 34 (disp_string -> DISP STRING .)
    IDENTIFIER      reduce using rule 34 (disp_string -> DISP STRING .)
    TRUE            reduce using rule 34 (disp_string -> DISP STRING .)
    FALSE           reduce using rule 34 (disp_string -> DISP STRING .)


state 71

    (43) exp -> MINUS exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

    TIMES           reduce using rule 43 (exp -> MINUS exp .)
    DIVIDE          reduce using rule 43 (exp -> MINUS exp .)
    PLUS            reduce using rule 43 (exp -> MINUS exp .)
    MINUS           reduce using rule 43 (exp -> MINUS exp .)
    MOD             reduce using rule 43 (exp -> MINUS exp .)
    PLUSPLUS        reduce using rule 43 (exp -> MINUS exp .)
    MINUSMINUS      reduce using rule 43 (exp -> MINUS exp .)
    GE              reduce using rule 43 (exp -> MINUS exp .)
    GT              reduce using rule 43 (exp -> MINUS exp .)
    LE              reduce using rule 43 (exp -> MINUS exp .)
    LT              reduce using rule 43 (exp -> MINUS exp .)
    EQUALEQUAL      reduce using rule 43 (exp -> MINUS exp .)
    NOT             reduce using rule 43 (exp -> MINUS exp .)
    SEMICOLON       reduce using rule 43 (exp -> MINUS exp .)
    COMMA           reduce using rule 43 (exp -> MINUS exp .)
    RPAREN          reduce using rule 43 (exp -> MINUS exp .)
    NUMBER          reduce using rule 43 (exp -> MINUS exp .)
    STRING          reduce using rule 43 (exp -> MINUS exp .)
    IDENTIFIER      reduce using rule 43 (exp -> MINUS exp .)
    TRUE            reduce using rule 43 (exp -> MINUS exp .)
    FALSE           reduce using rule 43 (exp -> MINUS exp .)
    LBRACE          reduce using rule 43 (exp -> MINUS exp .)

  ! TIMES           [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! PLUS            [ shift and go to state 49 ]
  ! MINUS           [ shift and go to state 50 ]
  ! MOD             [ shift and go to state 51 ]
  ! PLUSPLUS        [ shift and go to state 52 ]
  ! MINUSMINUS      [ shift and go to state 53 ]


state 72

    (4) til -> TIL LPAREN . assign_identifier rel_exp exp RPAREN compoundstmt
    (30) assign_identifier -> . SUPPOSE IDENTIFIER EQUAL stmt
    (31) assign_identifier -> . SUPPOSE IDENTIFIER
    (32) assign_identifier -> . IDENTIFIER EQUAL stmt

    SUPPOSE         shift and go to state 32
    IDENTIFIER      shift and go to state 111

    assign_identifier              shift and go to state 110

state 73

    (5) until -> WORK compoundstmt . UNTIL LPAREN rel_exp RPAREN

    UNTIL           shift and go to state 112


state 74

    (58) compoundstmt -> LBRACE . statements RBRACE
    (59) statements -> . stmt SEMICOLON statements
    (60) statements -> . empty
    (2) stmt -> . LEAVE
    (6) stmt -> . exp
    (7) stmt -> . til
    (8) stmt -> . until
    (9) stmt -> . assign_identifier
    (10) stmt -> . snake_list
    (11) stmt -> . snake_list_access
    (12) stmt -> . rel_exp
    (13) stmt -> . disp_var
    (14) stmt -> . disp_string
    (15) stmt -> . disp_list
    (16) stmt -> . empty
    (56) stmt -> . MAYBE rel_exp compoundstmt
    (57) stmt -> . MAYBE rel_exp compoundstmt OR compoundstmt
    (64) stmt -> . POP IDENTIFIER NUMBER
    (66) stmt -> . IDENTIFIER PUSH NUMBER
    (68) stmt -> . IDENTIFIER SLICE NUMBER NUMBER
    (69) stmt -> . IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER
    (70) stmt -> . MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (75) stmt -> . IDENTIFIER LPAREN optparams RPAREN
    (76) stmt -> . FIRE stmt
    (77) stmt -> . COMPLEX IDENTIFIER LBRACE attributes RBRACE
    (81) stmt -> . NEW IDENTIFIER IDENTIFIER
    (82) stmt -> . IDENTIFIER ACCESS IDENTIFIER EQUAL exp
    (83) stmt -> . DISP IDENTIFIER ACCESS IDENTIFIER
    (84) stmt -> . IDENTIFIER ACCESS IDENTIFIER
    (29) empty -> .
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (4) til -> . TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt
    (5) until -> . WORK compoundstmt UNTIL LPAREN rel_exp RPAREN
    (30) assign_identifier -> . SUPPOSE IDENTIFIER EQUAL stmt
    (31) assign_identifier -> . SUPPOSE IDENTIFIER
    (32) assign_identifier -> . IDENTIFIER EQUAL stmt
    (17) snake_list -> . SNAKE IDENTIFIER EQUAL num_snake
    (18) snake_list -> . SNAKE IDENTIFIER EQUAL string_snake
    (19) snake_list -> . SNAKE IDENTIFIER EQUAL bool_snake
    (20) snake_list_access -> . ACCESS IDENTIFIER NUMBER
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (33) disp_var -> . DISP IDENTIFIER
    (34) disp_string -> . DISP STRING
    (35) disp_list -> . DISPL IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    LEAVE           shift and go to state 11
    MAYBE           shift and go to state 63
    POP             shift and go to state 64
    IDENTIFIER      shift and go to state 65
    MACHINE         shift and go to state 21
    FIRE            shift and go to state 22
    COMPLEX         shift and go to state 23
    NEW             shift and go to state 24
    DISP            shift and go to state 26
    RBRACE          reduce using rule 29 (empty -> .)
    SEMICOLON       reduce using rule 29 (empty -> .)
    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    TIL             shift and go to state 30
    WORK            shift and go to state 31
    SUPPOSE         shift and go to state 32
    SNAKE           shift and go to state 33
    ACCESS          shift and go to state 25
    DISPL           shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    statements                     shift and go to state 113
    stmt                           shift and go to state 9
    empty                          shift and go to state 10
    exp                            shift and go to state 12
    til                            shift and go to state 13
    until                          shift and go to state 14
    assign_identifier              shift and go to state 15
    snake_list                     shift and go to state 16
    snake_list_access              shift and go to state 17
    rel_exp                        shift and go to state 5
    disp_var                       shift and go to state 18
    disp_string                    shift and go to state 19
    disp_list                      shift and go to state 20
    bool                           shift and go to state 29

state 75

    (30) assign_identifier -> SUPPOSE IDENTIFIER . EQUAL stmt
    (31) assign_identifier -> SUPPOSE IDENTIFIER .

    EQUAL           shift and go to state 114
    SEMICOLON       reduce using rule 31 (assign_identifier -> SUPPOSE IDENTIFIER .)
    COMMA           reduce using rule 31 (assign_identifier -> SUPPOSE IDENTIFIER .)
    RPAREN          reduce using rule 31 (assign_identifier -> SUPPOSE IDENTIFIER .)
    MINUS           reduce using rule 31 (assign_identifier -> SUPPOSE IDENTIFIER .)
    NUMBER          reduce using rule 31 (assign_identifier -> SUPPOSE IDENTIFIER .)
    STRING          reduce using rule 31 (assign_identifier -> SUPPOSE IDENTIFIER .)
    IDENTIFIER      reduce using rule 31 (assign_identifier -> SUPPOSE IDENTIFIER .)
    TRUE            reduce using rule 31 (assign_identifier -> SUPPOSE IDENTIFIER .)
    FALSE           reduce using rule 31 (assign_identifier -> SUPPOSE IDENTIFIER .)


state 76

    (17) snake_list -> SNAKE IDENTIFIER . EQUAL num_snake
    (18) snake_list -> SNAKE IDENTIFIER . EQUAL string_snake
    (19) snake_list -> SNAKE IDENTIFIER . EQUAL bool_snake

    EQUAL           shift and go to state 115


state 77

    (35) disp_list -> DISPL IDENTIFIER .

    SEMICOLON       reduce using rule 35 (disp_list -> DISPL IDENTIFIER .)
    COMMA           reduce using rule 35 (disp_list -> DISPL IDENTIFIER .)
    RPAREN          reduce using rule 35 (disp_list -> DISPL IDENTIFIER .)
    MINUS           reduce using rule 35 (disp_list -> DISPL IDENTIFIER .)
    NUMBER          reduce using rule 35 (disp_list -> DISPL IDENTIFIER .)
    STRING          reduce using rule 35 (disp_list -> DISPL IDENTIFIER .)
    IDENTIFIER      reduce using rule 35 (disp_list -> DISPL IDENTIFIER .)
    TRUE            reduce using rule 35 (disp_list -> DISPL IDENTIFIER .)
    FALSE           reduce using rule 35 (disp_list -> DISPL IDENTIFIER .)


state 78

    (61) main_statement -> MAYBE rel_exp compoundstmt .
    (62) main_statement -> MAYBE rel_exp compoundstmt . OR compoundstmt
    (56) stmt -> MAYBE rel_exp compoundstmt .
    (57) stmt -> MAYBE rel_exp compoundstmt . OR compoundstmt

    $end            reduce using rule 61 (main_statement -> MAYBE rel_exp compoundstmt .)
    OR              shift and go to state 116
    SEMICOLON       reduce using rule 56 (stmt -> MAYBE rel_exp compoundstmt .)


state 79

    (63) main_statement -> POP IDENTIFIER NUMBER .
    (64) stmt -> POP IDENTIFIER NUMBER .

    $end            reduce using rule 63 (main_statement -> POP IDENTIFIER NUMBER .)
    SEMICOLON       reduce using rule 64 (stmt -> POP IDENTIFIER NUMBER .)


state 80

    (65) main_statement -> IDENTIFIER PUSH NUMBER .
    (66) stmt -> IDENTIFIER PUSH NUMBER .

    $end            reduce using rule 65 (main_statement -> IDENTIFIER PUSH NUMBER .)
    SEMICOLON       reduce using rule 66 (stmt -> IDENTIFIER PUSH NUMBER .)


state 81

    (67) main_statement -> IDENTIFIER SLICE NUMBER . NUMBER
    (68) stmt -> IDENTIFIER SLICE NUMBER . NUMBER

    NUMBER          shift and go to state 117


state 82

    (69) stmt -> IDENTIFIER EQUAL IDENTIFIER . SLICE NUMBER NUMBER
    (66) stmt -> IDENTIFIER . PUSH NUMBER
    (68) stmt -> IDENTIFIER . SLICE NUMBER NUMBER
    (69) stmt -> IDENTIFIER . EQUAL IDENTIFIER SLICE NUMBER NUMBER
    (75) stmt -> IDENTIFIER . LPAREN optparams RPAREN
    (82) stmt -> IDENTIFIER . ACCESS IDENTIFIER EQUAL exp
    (84) stmt -> IDENTIFIER . ACCESS IDENTIFIER
    (49) exp -> IDENTIFIER .
    (32) assign_identifier -> IDENTIFIER . EQUAL stmt

    SLICE           shift and go to state 118
    PUSH            shift and go to state 104
    EQUAL           shift and go to state 43
    LPAREN          shift and go to state 44
    ACCESS          shift and go to state 45
    TIMES           reduce using rule 49 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 49 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 49 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 49 (exp -> IDENTIFIER .)
    MOD             reduce using rule 49 (exp -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 49 (exp -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 49 (exp -> IDENTIFIER .)
    GE              reduce using rule 49 (exp -> IDENTIFIER .)
    GT              reduce using rule 49 (exp -> IDENTIFIER .)
    LE              reduce using rule 49 (exp -> IDENTIFIER .)
    LT              reduce using rule 49 (exp -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 49 (exp -> IDENTIFIER .)
    NOT             reduce using rule 49 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 49 (exp -> IDENTIFIER .)
    COMMA           reduce using rule 49 (exp -> IDENTIFIER .)
    RPAREN          reduce using rule 49 (exp -> IDENTIFIER .)
    NUMBER          reduce using rule 49 (exp -> IDENTIFIER .)
    STRING          reduce using rule 49 (exp -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 49 (exp -> IDENTIFIER .)
    TRUE            reduce using rule 49 (exp -> IDENTIFIER .)
    FALSE           reduce using rule 49 (exp -> IDENTIFIER .)


state 83

    (32) assign_identifier -> IDENTIFIER EQUAL stmt .

    SEMICOLON       reduce using rule 32 (assign_identifier -> IDENTIFIER EQUAL stmt .)
    COMMA           reduce using rule 32 (assign_identifier -> IDENTIFIER EQUAL stmt .)
    RPAREN          reduce using rule 32 (assign_identifier -> IDENTIFIER EQUAL stmt .)
    MINUS           reduce using rule 32 (assign_identifier -> IDENTIFIER EQUAL stmt .)
    NUMBER          reduce using rule 32 (assign_identifier -> IDENTIFIER EQUAL stmt .)
    STRING          reduce using rule 32 (assign_identifier -> IDENTIFIER EQUAL stmt .)
    IDENTIFIER      reduce using rule 32 (assign_identifier -> IDENTIFIER EQUAL stmt .)
    TRUE            reduce using rule 32 (assign_identifier -> IDENTIFIER EQUAL stmt .)
    FALSE           reduce using rule 32 (assign_identifier -> IDENTIFIER EQUAL stmt .)


state 84

    (75) stmt -> IDENTIFIER LPAREN optparams . RPAREN

    RPAREN          shift and go to state 119


state 85

    (71) optparams -> params .

    RPAREN          reduce using rule 71 (optparams -> params .)


state 86

    (72) optparams -> empty .
    (16) stmt -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 16 (stmt -> empty .)
    COMMA           reduce using rule 16 (stmt -> empty .)
    RPAREN          reduce using rule 16 (stmt -> empty .)

  ! RPAREN          [ reduce using rule 72 (optparams -> empty .) ]


state 87

    (73) params -> stmt . COMMA params
    (74) params -> stmt .

    COMMA           shift and go to state 120
    RPAREN          reduce using rule 74 (params -> stmt .)


state 88

    (82) stmt -> IDENTIFIER ACCESS IDENTIFIER . EQUAL exp
    (84) stmt -> IDENTIFIER ACCESS IDENTIFIER .

    EQUAL           shift and go to state 121
    SEMICOLON       reduce using rule 84 (stmt -> IDENTIFIER ACCESS IDENTIFIER .)
    COMMA           reduce using rule 84 (stmt -> IDENTIFIER ACCESS IDENTIFIER .)
    RPAREN          reduce using rule 84 (stmt -> IDENTIFIER ACCESS IDENTIFIER .)
    MINUS           reduce using rule 84 (stmt -> IDENTIFIER ACCESS IDENTIFIER .)
    NUMBER          reduce using rule 84 (stmt -> IDENTIFIER ACCESS IDENTIFIER .)
    STRING          reduce using rule 84 (stmt -> IDENTIFIER ACCESS IDENTIFIER .)
    IDENTIFIER      reduce using rule 84 (stmt -> IDENTIFIER ACCESS IDENTIFIER .)
    TRUE            reduce using rule 84 (stmt -> IDENTIFIER ACCESS IDENTIFIER .)
    FALSE           reduce using rule 84 (stmt -> IDENTIFIER ACCESS IDENTIFIER .)


state 89

    (59) statements -> stmt SEMICOLON statements .

    $end            reduce using rule 59 (statements -> stmt SEMICOLON statements .)
    RBRACE          reduce using rule 59 (statements -> stmt SEMICOLON statements .)


state 90

    (36) exp -> exp TIMES exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

    TIMES           reduce using rule 36 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 36 (exp -> exp TIMES exp .)
    PLUS            reduce using rule 36 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 36 (exp -> exp TIMES exp .)
    MOD             reduce using rule 36 (exp -> exp TIMES exp .)
    PLUSPLUS        reduce using rule 36 (exp -> exp TIMES exp .)
    MINUSMINUS      reduce using rule 36 (exp -> exp TIMES exp .)
    GE              reduce using rule 36 (exp -> exp TIMES exp .)
    GT              reduce using rule 36 (exp -> exp TIMES exp .)
    LE              reduce using rule 36 (exp -> exp TIMES exp .)
    LT              reduce using rule 36 (exp -> exp TIMES exp .)
    EQUALEQUAL      reduce using rule 36 (exp -> exp TIMES exp .)
    NOT             reduce using rule 36 (exp -> exp TIMES exp .)
    SEMICOLON       reduce using rule 36 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 36 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 36 (exp -> exp TIMES exp .)
    NUMBER          reduce using rule 36 (exp -> exp TIMES exp .)
    STRING          reduce using rule 36 (exp -> exp TIMES exp .)
    IDENTIFIER      reduce using rule 36 (exp -> exp TIMES exp .)
    TRUE            reduce using rule 36 (exp -> exp TIMES exp .)
    FALSE           reduce using rule 36 (exp -> exp TIMES exp .)
    LBRACE          reduce using rule 36 (exp -> exp TIMES exp .)

  ! TIMES           [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! PLUS            [ shift and go to state 49 ]
  ! MINUS           [ shift and go to state 50 ]
  ! MOD             [ shift and go to state 51 ]
  ! PLUSPLUS        [ shift and go to state 52 ]
  ! MINUSMINUS      [ shift and go to state 53 ]


state 91

    (37) exp -> exp DIVIDE exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

    TIMES           reduce using rule 37 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 37 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 37 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 37 (exp -> exp DIVIDE exp .)
    MOD             reduce using rule 37 (exp -> exp DIVIDE exp .)
    PLUSPLUS        reduce using rule 37 (exp -> exp DIVIDE exp .)
    MINUSMINUS      reduce using rule 37 (exp -> exp DIVIDE exp .)
    GE              reduce using rule 37 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 37 (exp -> exp DIVIDE exp .)
    LE              reduce using rule 37 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 37 (exp -> exp DIVIDE exp .)
    EQUALEQUAL      reduce using rule 37 (exp -> exp DIVIDE exp .)
    NOT             reduce using rule 37 (exp -> exp DIVIDE exp .)
    SEMICOLON       reduce using rule 37 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 37 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 37 (exp -> exp DIVIDE exp .)
    NUMBER          reduce using rule 37 (exp -> exp DIVIDE exp .)
    STRING          reduce using rule 37 (exp -> exp DIVIDE exp .)
    IDENTIFIER      reduce using rule 37 (exp -> exp DIVIDE exp .)
    TRUE            reduce using rule 37 (exp -> exp DIVIDE exp .)
    FALSE           reduce using rule 37 (exp -> exp DIVIDE exp .)
    LBRACE          reduce using rule 37 (exp -> exp DIVIDE exp .)

  ! TIMES           [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! PLUS            [ shift and go to state 49 ]
  ! MINUS           [ shift and go to state 50 ]
  ! MOD             [ shift and go to state 51 ]
  ! PLUSPLUS        [ shift and go to state 52 ]
  ! MINUSMINUS      [ shift and go to state 53 ]


state 92

    (38) exp -> exp PLUS exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

    PLUS            reduce using rule 38 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 38 (exp -> exp PLUS exp .)
    PLUSPLUS        reduce using rule 38 (exp -> exp PLUS exp .)
    MINUSMINUS      reduce using rule 38 (exp -> exp PLUS exp .)
    GE              reduce using rule 38 (exp -> exp PLUS exp .)
    GT              reduce using rule 38 (exp -> exp PLUS exp .)
    LE              reduce using rule 38 (exp -> exp PLUS exp .)
    LT              reduce using rule 38 (exp -> exp PLUS exp .)
    EQUALEQUAL      reduce using rule 38 (exp -> exp PLUS exp .)
    NOT             reduce using rule 38 (exp -> exp PLUS exp .)
    SEMICOLON       reduce using rule 38 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 38 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 38 (exp -> exp PLUS exp .)
    NUMBER          reduce using rule 38 (exp -> exp PLUS exp .)
    STRING          reduce using rule 38 (exp -> exp PLUS exp .)
    IDENTIFIER      reduce using rule 38 (exp -> exp PLUS exp .)
    TRUE            reduce using rule 38 (exp -> exp PLUS exp .)
    FALSE           reduce using rule 38 (exp -> exp PLUS exp .)
    LBRACE          reduce using rule 38 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    MOD             shift and go to state 51

  ! TIMES           [ reduce using rule 38 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 38 (exp -> exp PLUS exp .) ]
  ! MOD             [ reduce using rule 38 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 49 ]
  ! MINUS           [ shift and go to state 50 ]
  ! PLUSPLUS        [ shift and go to state 52 ]
  ! MINUSMINUS      [ shift and go to state 53 ]


state 93

    (39) exp -> exp MINUS exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

    PLUS            reduce using rule 39 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 39 (exp -> exp MINUS exp .)
    PLUSPLUS        reduce using rule 39 (exp -> exp MINUS exp .)
    MINUSMINUS      reduce using rule 39 (exp -> exp MINUS exp .)
    GE              reduce using rule 39 (exp -> exp MINUS exp .)
    GT              reduce using rule 39 (exp -> exp MINUS exp .)
    LE              reduce using rule 39 (exp -> exp MINUS exp .)
    LT              reduce using rule 39 (exp -> exp MINUS exp .)
    EQUALEQUAL      reduce using rule 39 (exp -> exp MINUS exp .)
    NOT             reduce using rule 39 (exp -> exp MINUS exp .)
    SEMICOLON       reduce using rule 39 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 39 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 39 (exp -> exp MINUS exp .)
    NUMBER          reduce using rule 39 (exp -> exp MINUS exp .)
    STRING          reduce using rule 39 (exp -> exp MINUS exp .)
    IDENTIFIER      reduce using rule 39 (exp -> exp MINUS exp .)
    TRUE            reduce using rule 39 (exp -> exp MINUS exp .)
    FALSE           reduce using rule 39 (exp -> exp MINUS exp .)
    LBRACE          reduce using rule 39 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    MOD             shift and go to state 51

  ! TIMES           [ reduce using rule 39 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 39 (exp -> exp MINUS exp .) ]
  ! MOD             [ reduce using rule 39 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 49 ]
  ! MINUS           [ shift and go to state 50 ]
  ! PLUSPLUS        [ shift and go to state 52 ]
  ! MINUSMINUS      [ shift and go to state 53 ]


state 94

    (40) exp -> exp MOD exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

    TIMES           reduce using rule 40 (exp -> exp MOD exp .)
    DIVIDE          reduce using rule 40 (exp -> exp MOD exp .)
    PLUS            reduce using rule 40 (exp -> exp MOD exp .)
    MINUS           reduce using rule 40 (exp -> exp MOD exp .)
    MOD             reduce using rule 40 (exp -> exp MOD exp .)
    PLUSPLUS        reduce using rule 40 (exp -> exp MOD exp .)
    MINUSMINUS      reduce using rule 40 (exp -> exp MOD exp .)
    GE              reduce using rule 40 (exp -> exp MOD exp .)
    GT              reduce using rule 40 (exp -> exp MOD exp .)
    LE              reduce using rule 40 (exp -> exp MOD exp .)
    LT              reduce using rule 40 (exp -> exp MOD exp .)
    EQUALEQUAL      reduce using rule 40 (exp -> exp MOD exp .)
    NOT             reduce using rule 40 (exp -> exp MOD exp .)
    SEMICOLON       reduce using rule 40 (exp -> exp MOD exp .)
    COMMA           reduce using rule 40 (exp -> exp MOD exp .)
    RPAREN          reduce using rule 40 (exp -> exp MOD exp .)
    NUMBER          reduce using rule 40 (exp -> exp MOD exp .)
    STRING          reduce using rule 40 (exp -> exp MOD exp .)
    IDENTIFIER      reduce using rule 40 (exp -> exp MOD exp .)
    TRUE            reduce using rule 40 (exp -> exp MOD exp .)
    FALSE           reduce using rule 40 (exp -> exp MOD exp .)
    LBRACE          reduce using rule 40 (exp -> exp MOD exp .)

  ! TIMES           [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! PLUS            [ shift and go to state 49 ]
  ! MINUS           [ shift and go to state 50 ]
  ! MOD             [ shift and go to state 51 ]
  ! PLUSPLUS        [ shift and go to state 52 ]
  ! MINUSMINUS      [ shift and go to state 53 ]


state 95

    (50) rel_exp -> exp GE exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

    SEMICOLON       reduce using rule 50 (rel_exp -> exp GE exp .)
    LBRACE          reduce using rule 50 (rel_exp -> exp GE exp .)
    COMMA           reduce using rule 50 (rel_exp -> exp GE exp .)
    RPAREN          reduce using rule 50 (rel_exp -> exp GE exp .)
    NUMBER          reduce using rule 50 (rel_exp -> exp GE exp .)
    STRING          reduce using rule 50 (rel_exp -> exp GE exp .)
    IDENTIFIER      reduce using rule 50 (rel_exp -> exp GE exp .)
    TRUE            reduce using rule 50 (rel_exp -> exp GE exp .)
    FALSE           reduce using rule 50 (rel_exp -> exp GE exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MOD             shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! MINUS           [ reduce using rule 50 (rel_exp -> exp GE exp .) ]


state 96

    (51) rel_exp -> exp GT exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

    SEMICOLON       reduce using rule 51 (rel_exp -> exp GT exp .)
    LBRACE          reduce using rule 51 (rel_exp -> exp GT exp .)
    COMMA           reduce using rule 51 (rel_exp -> exp GT exp .)
    RPAREN          reduce using rule 51 (rel_exp -> exp GT exp .)
    NUMBER          reduce using rule 51 (rel_exp -> exp GT exp .)
    STRING          reduce using rule 51 (rel_exp -> exp GT exp .)
    IDENTIFIER      reduce using rule 51 (rel_exp -> exp GT exp .)
    TRUE            reduce using rule 51 (rel_exp -> exp GT exp .)
    FALSE           reduce using rule 51 (rel_exp -> exp GT exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MOD             shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! MINUS           [ reduce using rule 51 (rel_exp -> exp GT exp .) ]


state 97

    (52) rel_exp -> exp LE exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

    SEMICOLON       reduce using rule 52 (rel_exp -> exp LE exp .)
    LBRACE          reduce using rule 52 (rel_exp -> exp LE exp .)
    COMMA           reduce using rule 52 (rel_exp -> exp LE exp .)
    RPAREN          reduce using rule 52 (rel_exp -> exp LE exp .)
    NUMBER          reduce using rule 52 (rel_exp -> exp LE exp .)
    STRING          reduce using rule 52 (rel_exp -> exp LE exp .)
    IDENTIFIER      reduce using rule 52 (rel_exp -> exp LE exp .)
    TRUE            reduce using rule 52 (rel_exp -> exp LE exp .)
    FALSE           reduce using rule 52 (rel_exp -> exp LE exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MOD             shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! MINUS           [ reduce using rule 52 (rel_exp -> exp LE exp .) ]


state 98

    (53) rel_exp -> exp LT exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

    SEMICOLON       reduce using rule 53 (rel_exp -> exp LT exp .)
    LBRACE          reduce using rule 53 (rel_exp -> exp LT exp .)
    COMMA           reduce using rule 53 (rel_exp -> exp LT exp .)
    RPAREN          reduce using rule 53 (rel_exp -> exp LT exp .)
    NUMBER          reduce using rule 53 (rel_exp -> exp LT exp .)
    STRING          reduce using rule 53 (rel_exp -> exp LT exp .)
    IDENTIFIER      reduce using rule 53 (rel_exp -> exp LT exp .)
    TRUE            reduce using rule 53 (rel_exp -> exp LT exp .)
    FALSE           reduce using rule 53 (rel_exp -> exp LT exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MOD             shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! MINUS           [ reduce using rule 53 (rel_exp -> exp LT exp .) ]


state 99

    (54) rel_exp -> exp EQUALEQUAL exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

    SEMICOLON       reduce using rule 54 (rel_exp -> exp EQUALEQUAL exp .)
    LBRACE          reduce using rule 54 (rel_exp -> exp EQUALEQUAL exp .)
    COMMA           reduce using rule 54 (rel_exp -> exp EQUALEQUAL exp .)
    RPAREN          reduce using rule 54 (rel_exp -> exp EQUALEQUAL exp .)
    NUMBER          reduce using rule 54 (rel_exp -> exp EQUALEQUAL exp .)
    STRING          reduce using rule 54 (rel_exp -> exp EQUALEQUAL exp .)
    IDENTIFIER      reduce using rule 54 (rel_exp -> exp EQUALEQUAL exp .)
    TRUE            reduce using rule 54 (rel_exp -> exp EQUALEQUAL exp .)
    FALSE           reduce using rule 54 (rel_exp -> exp EQUALEQUAL exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MOD             shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! MINUS           [ reduce using rule 54 (rel_exp -> exp EQUALEQUAL exp .) ]


state 100

    (55) rel_exp -> exp NOT EQUAL . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 122
    bool                           shift and go to state 29

state 101

    (70) stmt -> MACHINE IDENTIFIER LPAREN . optparams RPAREN compoundstmt
    (71) optparams -> . params
    (72) optparams -> . empty
    (73) params -> . stmt COMMA params
    (74) params -> . stmt
    (29) empty -> .
    (2) stmt -> . LEAVE
    (6) stmt -> . exp
    (7) stmt -> . til
    (8) stmt -> . until
    (9) stmt -> . assign_identifier
    (10) stmt -> . snake_list
    (11) stmt -> . snake_list_access
    (12) stmt -> . rel_exp
    (13) stmt -> . disp_var
    (14) stmt -> . disp_string
    (15) stmt -> . disp_list
    (16) stmt -> . empty
    (56) stmt -> . MAYBE rel_exp compoundstmt
    (57) stmt -> . MAYBE rel_exp compoundstmt OR compoundstmt
    (64) stmt -> . POP IDENTIFIER NUMBER
    (66) stmt -> . IDENTIFIER PUSH NUMBER
    (68) stmt -> . IDENTIFIER SLICE NUMBER NUMBER
    (69) stmt -> . IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER
    (70) stmt -> . MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (75) stmt -> . IDENTIFIER LPAREN optparams RPAREN
    (76) stmt -> . FIRE stmt
    (77) stmt -> . COMPLEX IDENTIFIER LBRACE attributes RBRACE
    (81) stmt -> . NEW IDENTIFIER IDENTIFIER
    (82) stmt -> . IDENTIFIER ACCESS IDENTIFIER EQUAL exp
    (83) stmt -> . DISP IDENTIFIER ACCESS IDENTIFIER
    (84) stmt -> . IDENTIFIER ACCESS IDENTIFIER
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (4) til -> . TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt
    (5) until -> . WORK compoundstmt UNTIL LPAREN rel_exp RPAREN
    (30) assign_identifier -> . SUPPOSE IDENTIFIER EQUAL stmt
    (31) assign_identifier -> . SUPPOSE IDENTIFIER
    (32) assign_identifier -> . IDENTIFIER EQUAL stmt
    (17) snake_list -> . SNAKE IDENTIFIER EQUAL num_snake
    (18) snake_list -> . SNAKE IDENTIFIER EQUAL string_snake
    (19) snake_list -> . SNAKE IDENTIFIER EQUAL bool_snake
    (20) snake_list_access -> . ACCESS IDENTIFIER NUMBER
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (33) disp_var -> . DISP IDENTIFIER
    (34) disp_string -> . DISP STRING
    (35) disp_list -> . DISPL IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    RPAREN          reduce using rule 29 (empty -> .)
    COMMA           reduce using rule 29 (empty -> .)
    LEAVE           shift and go to state 11
    MAYBE           shift and go to state 63
    POP             shift and go to state 64
    IDENTIFIER      shift and go to state 65
    MACHINE         shift and go to state 21
    FIRE            shift and go to state 22
    COMPLEX         shift and go to state 23
    NEW             shift and go to state 24
    DISP            shift and go to state 26
    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    TIL             shift and go to state 30
    WORK            shift and go to state 31
    SUPPOSE         shift and go to state 32
    SNAKE           shift and go to state 33
    ACCESS          shift and go to state 25
    DISPL           shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    optparams                      shift and go to state 123
    params                         shift and go to state 85
    empty                          shift and go to state 86
    stmt                           shift and go to state 87
    exp                            shift and go to state 12
    til                            shift and go to state 13
    until                          shift and go to state 14
    assign_identifier              shift and go to state 15
    snake_list                     shift and go to state 16
    snake_list_access              shift and go to state 17
    rel_exp                        shift and go to state 5
    disp_var                       shift and go to state 18
    disp_string                    shift and go to state 19
    disp_list                      shift and go to state 20
    bool                           shift and go to state 29

state 102

    (56) stmt -> MAYBE rel_exp . compoundstmt
    (57) stmt -> MAYBE rel_exp . compoundstmt OR compoundstmt
    (58) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 74

    compoundstmt                   shift and go to state 124

state 103

    (64) stmt -> POP IDENTIFIER . NUMBER

    NUMBER          shift and go to state 125


state 104

    (66) stmt -> IDENTIFIER PUSH . NUMBER

    NUMBER          shift and go to state 126


state 105

    (68) stmt -> IDENTIFIER SLICE . NUMBER NUMBER

    NUMBER          shift and go to state 127


state 106

    (77) stmt -> COMPLEX IDENTIFIER LBRACE . attributes RBRACE
    (78) attributes -> . IDENTIFIER SEMICOLON attributes
    (79) attributes -> . IDENTIFIER SEMICOLON
    (80) attributes -> . empty
    (29) empty -> .

    IDENTIFIER      shift and go to state 128
    RBRACE          reduce using rule 29 (empty -> .)

    attributes                     shift and go to state 129
    empty                          shift and go to state 130

state 107

    (81) stmt -> NEW IDENTIFIER IDENTIFIER .

    SEMICOLON       reduce using rule 81 (stmt -> NEW IDENTIFIER IDENTIFIER .)
    COMMA           reduce using rule 81 (stmt -> NEW IDENTIFIER IDENTIFIER .)
    RPAREN          reduce using rule 81 (stmt -> NEW IDENTIFIER IDENTIFIER .)
    MINUS           reduce using rule 81 (stmt -> NEW IDENTIFIER IDENTIFIER .)
    NUMBER          reduce using rule 81 (stmt -> NEW IDENTIFIER IDENTIFIER .)
    STRING          reduce using rule 81 (stmt -> NEW IDENTIFIER IDENTIFIER .)
    IDENTIFIER      reduce using rule 81 (stmt -> NEW IDENTIFIER IDENTIFIER .)
    TRUE            reduce using rule 81 (stmt -> NEW IDENTIFIER IDENTIFIER .)
    FALSE           reduce using rule 81 (stmt -> NEW IDENTIFIER IDENTIFIER .)


state 108

    (20) snake_list_access -> ACCESS IDENTIFIER NUMBER .

    SEMICOLON       reduce using rule 20 (snake_list_access -> ACCESS IDENTIFIER NUMBER .)
    COMMA           reduce using rule 20 (snake_list_access -> ACCESS IDENTIFIER NUMBER .)
    RPAREN          reduce using rule 20 (snake_list_access -> ACCESS IDENTIFIER NUMBER .)
    MINUS           reduce using rule 20 (snake_list_access -> ACCESS IDENTIFIER NUMBER .)
    NUMBER          reduce using rule 20 (snake_list_access -> ACCESS IDENTIFIER NUMBER .)
    STRING          reduce using rule 20 (snake_list_access -> ACCESS IDENTIFIER NUMBER .)
    IDENTIFIER      reduce using rule 20 (snake_list_access -> ACCESS IDENTIFIER NUMBER .)
    TRUE            reduce using rule 20 (snake_list_access -> ACCESS IDENTIFIER NUMBER .)
    FALSE           reduce using rule 20 (snake_list_access -> ACCESS IDENTIFIER NUMBER .)


state 109

    (83) stmt -> DISP IDENTIFIER ACCESS . IDENTIFIER

    IDENTIFIER      shift and go to state 131


state 110

    (4) til -> TIL LPAREN assign_identifier . rel_exp exp RPAREN compoundstmt
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    rel_exp                        shift and go to state 132
    exp                            shift and go to state 38
    bool                           shift and go to state 29

state 111

    (32) assign_identifier -> IDENTIFIER . EQUAL stmt

    EQUAL           shift and go to state 133


state 112

    (5) until -> WORK compoundstmt UNTIL . LPAREN rel_exp RPAREN

    LPAREN          shift and go to state 134


state 113

    (58) compoundstmt -> LBRACE statements . RBRACE

    RBRACE          shift and go to state 135


state 114

    (30) assign_identifier -> SUPPOSE IDENTIFIER EQUAL . stmt
    (2) stmt -> . LEAVE
    (6) stmt -> . exp
    (7) stmt -> . til
    (8) stmt -> . until
    (9) stmt -> . assign_identifier
    (10) stmt -> . snake_list
    (11) stmt -> . snake_list_access
    (12) stmt -> . rel_exp
    (13) stmt -> . disp_var
    (14) stmt -> . disp_string
    (15) stmt -> . disp_list
    (16) stmt -> . empty
    (56) stmt -> . MAYBE rel_exp compoundstmt
    (57) stmt -> . MAYBE rel_exp compoundstmt OR compoundstmt
    (64) stmt -> . POP IDENTIFIER NUMBER
    (66) stmt -> . IDENTIFIER PUSH NUMBER
    (68) stmt -> . IDENTIFIER SLICE NUMBER NUMBER
    (69) stmt -> . IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER
    (70) stmt -> . MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (75) stmt -> . IDENTIFIER LPAREN optparams RPAREN
    (76) stmt -> . FIRE stmt
    (77) stmt -> . COMPLEX IDENTIFIER LBRACE attributes RBRACE
    (81) stmt -> . NEW IDENTIFIER IDENTIFIER
    (82) stmt -> . IDENTIFIER ACCESS IDENTIFIER EQUAL exp
    (83) stmt -> . DISP IDENTIFIER ACCESS IDENTIFIER
    (84) stmt -> . IDENTIFIER ACCESS IDENTIFIER
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (4) til -> . TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt
    (5) until -> . WORK compoundstmt UNTIL LPAREN rel_exp RPAREN
    (30) assign_identifier -> . SUPPOSE IDENTIFIER EQUAL stmt
    (31) assign_identifier -> . SUPPOSE IDENTIFIER
    (32) assign_identifier -> . IDENTIFIER EQUAL stmt
    (17) snake_list -> . SNAKE IDENTIFIER EQUAL num_snake
    (18) snake_list -> . SNAKE IDENTIFIER EQUAL string_snake
    (19) snake_list -> . SNAKE IDENTIFIER EQUAL bool_snake
    (20) snake_list_access -> . ACCESS IDENTIFIER NUMBER
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (33) disp_var -> . DISP IDENTIFIER
    (34) disp_string -> . DISP STRING
    (35) disp_list -> . DISPL IDENTIFIER
    (29) empty -> .
    (47) bool -> . TRUE
    (48) bool -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEAVE           shift and go to state 11
    MAYBE           shift and go to state 63
    POP             shift and go to state 64
    IDENTIFIER      shift and go to state 65
    MACHINE         shift and go to state 21
    FIRE            shift and go to state 22
    COMPLEX         shift and go to state 23
    NEW             shift and go to state 24
    DISP            shift and go to state 26
    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    TIL             shift and go to state 30
    WORK            shift and go to state 31
    SUPPOSE         shift and go to state 32
    SNAKE           shift and go to state 33
    ACCESS          shift and go to state 25
    DISPL           shift and go to state 34
    SEMICOLON       reduce using rule 29 (empty -> .)
    COMMA           reduce using rule 29 (empty -> .)
    RPAREN          reduce using rule 29 (empty -> .)
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

  ! MINUS           [ reduce using rule 29 (empty -> .) ]
  ! NUMBER          [ reduce using rule 29 (empty -> .) ]
  ! STRING          [ reduce using rule 29 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 29 (empty -> .) ]
  ! TRUE            [ reduce using rule 29 (empty -> .) ]
  ! FALSE           [ reduce using rule 29 (empty -> .) ]

    stmt                           shift and go to state 136
    exp                            shift and go to state 12
    til                            shift and go to state 13
    until                          shift and go to state 14
    assign_identifier              shift and go to state 15
    snake_list                     shift and go to state 16
    snake_list_access              shift and go to state 17
    rel_exp                        shift and go to state 5
    disp_var                       shift and go to state 18
    disp_string                    shift and go to state 19
    disp_list                      shift and go to state 20
    empty                          shift and go to state 62
    bool                           shift and go to state 29

state 115

    (17) snake_list -> SNAKE IDENTIFIER EQUAL . num_snake
    (18) snake_list -> SNAKE IDENTIFIER EQUAL . string_snake
    (19) snake_list -> SNAKE IDENTIFIER EQUAL . bool_snake
    (21) num_snake -> . num_snake COMMA exp
    (22) num_snake -> . exp
    (23) num_snake -> . empty
    (24) string_snake -> . string_snake COMMA STRING
    (25) string_snake -> . STRING
    (26) string_snake -> . empty
    (27) bool_snake -> . bool_snake COMMA bool
    (28) bool_snake -> . bool
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (29) empty -> .
    (47) bool -> . TRUE
    (48) bool -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    STRING          shift and go to state 142
    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    IDENTIFIER      shift and go to state 39
    COMMA           reduce using rule 29 (empty -> .)
    SEMICOLON       reduce using rule 29 (empty -> .)
    RPAREN          reduce using rule 29 (empty -> .)
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

  ! MINUS           [ reduce using rule 29 (empty -> .) ]
  ! NUMBER          [ reduce using rule 29 (empty -> .) ]
  ! STRING          [ reduce using rule 29 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 29 (empty -> .) ]
  ! TRUE            [ reduce using rule 29 (empty -> .) ]
  ! FALSE           [ reduce using rule 29 (empty -> .) ]

    num_snake                      shift and go to state 137
    string_snake                   shift and go to state 138
    bool_snake                     shift and go to state 139
    exp                            shift and go to state 140
    empty                          shift and go to state 141
    bool                           shift and go to state 143

state 116

    (62) main_statement -> MAYBE rel_exp compoundstmt OR . compoundstmt
    (57) stmt -> MAYBE rel_exp compoundstmt OR . compoundstmt
    (58) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 74

    compoundstmt                   shift and go to state 144

state 117

    (67) main_statement -> IDENTIFIER SLICE NUMBER NUMBER .
    (68) stmt -> IDENTIFIER SLICE NUMBER NUMBER .

    $end            reduce using rule 67 (main_statement -> IDENTIFIER SLICE NUMBER NUMBER .)
    SEMICOLON       reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)


state 118

    (69) stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE . NUMBER NUMBER
    (68) stmt -> IDENTIFIER SLICE . NUMBER NUMBER

    NUMBER          shift and go to state 145


state 119

    (75) stmt -> IDENTIFIER LPAREN optparams RPAREN .

    SEMICOLON       reduce using rule 75 (stmt -> IDENTIFIER LPAREN optparams RPAREN .)
    COMMA           reduce using rule 75 (stmt -> IDENTIFIER LPAREN optparams RPAREN .)
    RPAREN          reduce using rule 75 (stmt -> IDENTIFIER LPAREN optparams RPAREN .)
    MINUS           reduce using rule 75 (stmt -> IDENTIFIER LPAREN optparams RPAREN .)
    NUMBER          reduce using rule 75 (stmt -> IDENTIFIER LPAREN optparams RPAREN .)
    STRING          reduce using rule 75 (stmt -> IDENTIFIER LPAREN optparams RPAREN .)
    IDENTIFIER      reduce using rule 75 (stmt -> IDENTIFIER LPAREN optparams RPAREN .)
    TRUE            reduce using rule 75 (stmt -> IDENTIFIER LPAREN optparams RPAREN .)
    FALSE           reduce using rule 75 (stmt -> IDENTIFIER LPAREN optparams RPAREN .)


state 120

    (73) params -> stmt COMMA . params
    (73) params -> . stmt COMMA params
    (74) params -> . stmt
    (2) stmt -> . LEAVE
    (6) stmt -> . exp
    (7) stmt -> . til
    (8) stmt -> . until
    (9) stmt -> . assign_identifier
    (10) stmt -> . snake_list
    (11) stmt -> . snake_list_access
    (12) stmt -> . rel_exp
    (13) stmt -> . disp_var
    (14) stmt -> . disp_string
    (15) stmt -> . disp_list
    (16) stmt -> . empty
    (56) stmt -> . MAYBE rel_exp compoundstmt
    (57) stmt -> . MAYBE rel_exp compoundstmt OR compoundstmt
    (64) stmt -> . POP IDENTIFIER NUMBER
    (66) stmt -> . IDENTIFIER PUSH NUMBER
    (68) stmt -> . IDENTIFIER SLICE NUMBER NUMBER
    (69) stmt -> . IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER
    (70) stmt -> . MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (75) stmt -> . IDENTIFIER LPAREN optparams RPAREN
    (76) stmt -> . FIRE stmt
    (77) stmt -> . COMPLEX IDENTIFIER LBRACE attributes RBRACE
    (81) stmt -> . NEW IDENTIFIER IDENTIFIER
    (82) stmt -> . IDENTIFIER ACCESS IDENTIFIER EQUAL exp
    (83) stmt -> . DISP IDENTIFIER ACCESS IDENTIFIER
    (84) stmt -> . IDENTIFIER ACCESS IDENTIFIER
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (4) til -> . TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt
    (5) until -> . WORK compoundstmt UNTIL LPAREN rel_exp RPAREN
    (30) assign_identifier -> . SUPPOSE IDENTIFIER EQUAL stmt
    (31) assign_identifier -> . SUPPOSE IDENTIFIER
    (32) assign_identifier -> . IDENTIFIER EQUAL stmt
    (17) snake_list -> . SNAKE IDENTIFIER EQUAL num_snake
    (18) snake_list -> . SNAKE IDENTIFIER EQUAL string_snake
    (19) snake_list -> . SNAKE IDENTIFIER EQUAL bool_snake
    (20) snake_list_access -> . ACCESS IDENTIFIER NUMBER
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (33) disp_var -> . DISP IDENTIFIER
    (34) disp_string -> . DISP STRING
    (35) disp_list -> . DISPL IDENTIFIER
    (29) empty -> .
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    LEAVE           shift and go to state 11
    MAYBE           shift and go to state 63
    POP             shift and go to state 64
    IDENTIFIER      shift and go to state 65
    MACHINE         shift and go to state 21
    FIRE            shift and go to state 22
    COMPLEX         shift and go to state 23
    NEW             shift and go to state 24
    DISP            shift and go to state 26
    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    TIL             shift and go to state 30
    WORK            shift and go to state 31
    SUPPOSE         shift and go to state 32
    SNAKE           shift and go to state 33
    ACCESS          shift and go to state 25
    DISPL           shift and go to state 34
    COMMA           reduce using rule 29 (empty -> .)
    RPAREN          reduce using rule 29 (empty -> .)
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    stmt                           shift and go to state 87
    params                         shift and go to state 146
    exp                            shift and go to state 12
    til                            shift and go to state 13
    until                          shift and go to state 14
    assign_identifier              shift and go to state 15
    snake_list                     shift and go to state 16
    snake_list_access              shift and go to state 17
    rel_exp                        shift and go to state 5
    disp_var                       shift and go to state 18
    disp_string                    shift and go to state 19
    disp_list                      shift and go to state 20
    empty                          shift and go to state 62
    bool                           shift and go to state 29

state 121

    (82) stmt -> IDENTIFIER ACCESS IDENTIFIER EQUAL . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 147
    bool                           shift and go to state 29

state 122

    (55) rel_exp -> exp NOT EQUAL exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 55 (rel_exp -> exp NOT EQUAL exp .)
    LBRACE          reduce using rule 55 (rel_exp -> exp NOT EQUAL exp .)
    COMMA           reduce using rule 55 (rel_exp -> exp NOT EQUAL exp .)
    RPAREN          reduce using rule 55 (rel_exp -> exp NOT EQUAL exp .)
    NUMBER          reduce using rule 55 (rel_exp -> exp NOT EQUAL exp .)
    STRING          reduce using rule 55 (rel_exp -> exp NOT EQUAL exp .)
    IDENTIFIER      reduce using rule 55 (rel_exp -> exp NOT EQUAL exp .)
    TRUE            reduce using rule 55 (rel_exp -> exp NOT EQUAL exp .)
    FALSE           reduce using rule 55 (rel_exp -> exp NOT EQUAL exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MOD             shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! MINUS           [ reduce using rule 55 (rel_exp -> exp NOT EQUAL exp .) ]


state 123

    (70) stmt -> MACHINE IDENTIFIER LPAREN optparams . RPAREN compoundstmt

    RPAREN          shift and go to state 148


state 124

    (56) stmt -> MAYBE rel_exp compoundstmt .
    (57) stmt -> MAYBE rel_exp compoundstmt . OR compoundstmt

    SEMICOLON       reduce using rule 56 (stmt -> MAYBE rel_exp compoundstmt .)
    COMMA           reduce using rule 56 (stmt -> MAYBE rel_exp compoundstmt .)
    RPAREN          reduce using rule 56 (stmt -> MAYBE rel_exp compoundstmt .)
    MINUS           reduce using rule 56 (stmt -> MAYBE rel_exp compoundstmt .)
    NUMBER          reduce using rule 56 (stmt -> MAYBE rel_exp compoundstmt .)
    STRING          reduce using rule 56 (stmt -> MAYBE rel_exp compoundstmt .)
    IDENTIFIER      reduce using rule 56 (stmt -> MAYBE rel_exp compoundstmt .)
    TRUE            reduce using rule 56 (stmt -> MAYBE rel_exp compoundstmt .)
    FALSE           reduce using rule 56 (stmt -> MAYBE rel_exp compoundstmt .)
    OR              shift and go to state 149


state 125

    (64) stmt -> POP IDENTIFIER NUMBER .

    SEMICOLON       reduce using rule 64 (stmt -> POP IDENTIFIER NUMBER .)
    COMMA           reduce using rule 64 (stmt -> POP IDENTIFIER NUMBER .)
    RPAREN          reduce using rule 64 (stmt -> POP IDENTIFIER NUMBER .)
    MINUS           reduce using rule 64 (stmt -> POP IDENTIFIER NUMBER .)
    NUMBER          reduce using rule 64 (stmt -> POP IDENTIFIER NUMBER .)
    STRING          reduce using rule 64 (stmt -> POP IDENTIFIER NUMBER .)
    IDENTIFIER      reduce using rule 64 (stmt -> POP IDENTIFIER NUMBER .)
    TRUE            reduce using rule 64 (stmt -> POP IDENTIFIER NUMBER .)
    FALSE           reduce using rule 64 (stmt -> POP IDENTIFIER NUMBER .)


state 126

    (66) stmt -> IDENTIFIER PUSH NUMBER .

    SEMICOLON       reduce using rule 66 (stmt -> IDENTIFIER PUSH NUMBER .)
    COMMA           reduce using rule 66 (stmt -> IDENTIFIER PUSH NUMBER .)
    RPAREN          reduce using rule 66 (stmt -> IDENTIFIER PUSH NUMBER .)
    MINUS           reduce using rule 66 (stmt -> IDENTIFIER PUSH NUMBER .)
    NUMBER          reduce using rule 66 (stmt -> IDENTIFIER PUSH NUMBER .)
    STRING          reduce using rule 66 (stmt -> IDENTIFIER PUSH NUMBER .)
    IDENTIFIER      reduce using rule 66 (stmt -> IDENTIFIER PUSH NUMBER .)
    TRUE            reduce using rule 66 (stmt -> IDENTIFIER PUSH NUMBER .)
    FALSE           reduce using rule 66 (stmt -> IDENTIFIER PUSH NUMBER .)


state 127

    (68) stmt -> IDENTIFIER SLICE NUMBER . NUMBER

    NUMBER          shift and go to state 150


state 128

    (78) attributes -> IDENTIFIER . SEMICOLON attributes
    (79) attributes -> IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 151


state 129

    (77) stmt -> COMPLEX IDENTIFIER LBRACE attributes . RBRACE

    RBRACE          shift and go to state 152


state 130

    (80) attributes -> empty .

    RBRACE          reduce using rule 80 (attributes -> empty .)


state 131

    (83) stmt -> DISP IDENTIFIER ACCESS IDENTIFIER .

    SEMICOLON       reduce using rule 83 (stmt -> DISP IDENTIFIER ACCESS IDENTIFIER .)
    COMMA           reduce using rule 83 (stmt -> DISP IDENTIFIER ACCESS IDENTIFIER .)
    RPAREN          reduce using rule 83 (stmt -> DISP IDENTIFIER ACCESS IDENTIFIER .)
    MINUS           reduce using rule 83 (stmt -> DISP IDENTIFIER ACCESS IDENTIFIER .)
    NUMBER          reduce using rule 83 (stmt -> DISP IDENTIFIER ACCESS IDENTIFIER .)
    STRING          reduce using rule 83 (stmt -> DISP IDENTIFIER ACCESS IDENTIFIER .)
    IDENTIFIER      reduce using rule 83 (stmt -> DISP IDENTIFIER ACCESS IDENTIFIER .)
    TRUE            reduce using rule 83 (stmt -> DISP IDENTIFIER ACCESS IDENTIFIER .)
    FALSE           reduce using rule 83 (stmt -> DISP IDENTIFIER ACCESS IDENTIFIER .)


state 132

    (4) til -> TIL LPAREN assign_identifier rel_exp . exp RPAREN compoundstmt
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 153
    bool                           shift and go to state 29

state 133

    (32) assign_identifier -> IDENTIFIER EQUAL . stmt
    (2) stmt -> . LEAVE
    (6) stmt -> . exp
    (7) stmt -> . til
    (8) stmt -> . until
    (9) stmt -> . assign_identifier
    (10) stmt -> . snake_list
    (11) stmt -> . snake_list_access
    (12) stmt -> . rel_exp
    (13) stmt -> . disp_var
    (14) stmt -> . disp_string
    (15) stmt -> . disp_list
    (16) stmt -> . empty
    (56) stmt -> . MAYBE rel_exp compoundstmt
    (57) stmt -> . MAYBE rel_exp compoundstmt OR compoundstmt
    (64) stmt -> . POP IDENTIFIER NUMBER
    (66) stmt -> . IDENTIFIER PUSH NUMBER
    (68) stmt -> . IDENTIFIER SLICE NUMBER NUMBER
    (69) stmt -> . IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER
    (70) stmt -> . MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (75) stmt -> . IDENTIFIER LPAREN optparams RPAREN
    (76) stmt -> . FIRE stmt
    (77) stmt -> . COMPLEX IDENTIFIER LBRACE attributes RBRACE
    (81) stmt -> . NEW IDENTIFIER IDENTIFIER
    (82) stmt -> . IDENTIFIER ACCESS IDENTIFIER EQUAL exp
    (83) stmt -> . DISP IDENTIFIER ACCESS IDENTIFIER
    (84) stmt -> . IDENTIFIER ACCESS IDENTIFIER
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (4) til -> . TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt
    (5) until -> . WORK compoundstmt UNTIL LPAREN rel_exp RPAREN
    (30) assign_identifier -> . SUPPOSE IDENTIFIER EQUAL stmt
    (31) assign_identifier -> . SUPPOSE IDENTIFIER
    (32) assign_identifier -> . IDENTIFIER EQUAL stmt
    (17) snake_list -> . SNAKE IDENTIFIER EQUAL num_snake
    (18) snake_list -> . SNAKE IDENTIFIER EQUAL string_snake
    (19) snake_list -> . SNAKE IDENTIFIER EQUAL bool_snake
    (20) snake_list_access -> . ACCESS IDENTIFIER NUMBER
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (33) disp_var -> . DISP IDENTIFIER
    (34) disp_string -> . DISP STRING
    (35) disp_list -> . DISPL IDENTIFIER
    (29) empty -> .
    (47) bool -> . TRUE
    (48) bool -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LEAVE           shift and go to state 11
    MAYBE           shift and go to state 63
    POP             shift and go to state 64
    IDENTIFIER      shift and go to state 65
    MACHINE         shift and go to state 21
    FIRE            shift and go to state 22
    COMPLEX         shift and go to state 23
    NEW             shift and go to state 24
    DISP            shift and go to state 26
    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    TIL             shift and go to state 30
    WORK            shift and go to state 31
    SUPPOSE         shift and go to state 32
    SNAKE           shift and go to state 33
    ACCESS          shift and go to state 25
    DISPL           shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

  ! MINUS           [ reduce using rule 29 (empty -> .) ]
  ! NUMBER          [ reduce using rule 29 (empty -> .) ]
  ! STRING          [ reduce using rule 29 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 29 (empty -> .) ]
  ! TRUE            [ reduce using rule 29 (empty -> .) ]
  ! FALSE           [ reduce using rule 29 (empty -> .) ]

    stmt                           shift and go to state 83
    exp                            shift and go to state 12
    til                            shift and go to state 13
    until                          shift and go to state 14
    assign_identifier              shift and go to state 15
    snake_list                     shift and go to state 16
    snake_list_access              shift and go to state 17
    rel_exp                        shift and go to state 5
    disp_var                       shift and go to state 18
    disp_string                    shift and go to state 19
    disp_list                      shift and go to state 20
    empty                          shift and go to state 62
    bool                           shift and go to state 29

state 134

    (5) until -> WORK compoundstmt UNTIL LPAREN . rel_exp RPAREN
    (50) rel_exp -> . exp GE exp
    (51) rel_exp -> . exp GT exp
    (52) rel_exp -> . exp LE exp
    (53) rel_exp -> . exp LT exp
    (54) rel_exp -> . exp EQUALEQUAL exp
    (55) rel_exp -> . exp NOT EQUAL exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    rel_exp                        shift and go to state 154
    exp                            shift and go to state 38
    bool                           shift and go to state 29

state 135

    (58) compoundstmt -> LBRACE statements RBRACE .

    UNTIL           reduce using rule 58 (compoundstmt -> LBRACE statements RBRACE .)
    OR              reduce using rule 58 (compoundstmt -> LBRACE statements RBRACE .)
    $end            reduce using rule 58 (compoundstmt -> LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 58 (compoundstmt -> LBRACE statements RBRACE .)
    COMMA           reduce using rule 58 (compoundstmt -> LBRACE statements RBRACE .)
    RPAREN          reduce using rule 58 (compoundstmt -> LBRACE statements RBRACE .)
    MINUS           reduce using rule 58 (compoundstmt -> LBRACE statements RBRACE .)
    NUMBER          reduce using rule 58 (compoundstmt -> LBRACE statements RBRACE .)
    STRING          reduce using rule 58 (compoundstmt -> LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 58 (compoundstmt -> LBRACE statements RBRACE .)
    TRUE            reduce using rule 58 (compoundstmt -> LBRACE statements RBRACE .)
    FALSE           reduce using rule 58 (compoundstmt -> LBRACE statements RBRACE .)


state 136

    (30) assign_identifier -> SUPPOSE IDENTIFIER EQUAL stmt .

    SEMICOLON       reduce using rule 30 (assign_identifier -> SUPPOSE IDENTIFIER EQUAL stmt .)
    COMMA           reduce using rule 30 (assign_identifier -> SUPPOSE IDENTIFIER EQUAL stmt .)
    RPAREN          reduce using rule 30 (assign_identifier -> SUPPOSE IDENTIFIER EQUAL stmt .)
    MINUS           reduce using rule 30 (assign_identifier -> SUPPOSE IDENTIFIER EQUAL stmt .)
    NUMBER          reduce using rule 30 (assign_identifier -> SUPPOSE IDENTIFIER EQUAL stmt .)
    STRING          reduce using rule 30 (assign_identifier -> SUPPOSE IDENTIFIER EQUAL stmt .)
    IDENTIFIER      reduce using rule 30 (assign_identifier -> SUPPOSE IDENTIFIER EQUAL stmt .)
    TRUE            reduce using rule 30 (assign_identifier -> SUPPOSE IDENTIFIER EQUAL stmt .)
    FALSE           reduce using rule 30 (assign_identifier -> SUPPOSE IDENTIFIER EQUAL stmt .)


state 137

    (17) snake_list -> SNAKE IDENTIFIER EQUAL num_snake .
    (21) num_snake -> num_snake . COMMA exp

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 17 (snake_list -> SNAKE IDENTIFIER EQUAL num_snake .)
    RPAREN          reduce using rule 17 (snake_list -> SNAKE IDENTIFIER EQUAL num_snake .)
    MINUS           reduce using rule 17 (snake_list -> SNAKE IDENTIFIER EQUAL num_snake .)
    NUMBER          reduce using rule 17 (snake_list -> SNAKE IDENTIFIER EQUAL num_snake .)
    STRING          reduce using rule 17 (snake_list -> SNAKE IDENTIFIER EQUAL num_snake .)
    IDENTIFIER      reduce using rule 17 (snake_list -> SNAKE IDENTIFIER EQUAL num_snake .)
    TRUE            reduce using rule 17 (snake_list -> SNAKE IDENTIFIER EQUAL num_snake .)
    FALSE           reduce using rule 17 (snake_list -> SNAKE IDENTIFIER EQUAL num_snake .)
    COMMA           shift and go to state 155

  ! COMMA           [ reduce using rule 17 (snake_list -> SNAKE IDENTIFIER EQUAL num_snake .) ]


state 138

    (18) snake_list -> SNAKE IDENTIFIER EQUAL string_snake .
    (24) string_snake -> string_snake . COMMA STRING

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 18 (snake_list -> SNAKE IDENTIFIER EQUAL string_snake .)
    RPAREN          reduce using rule 18 (snake_list -> SNAKE IDENTIFIER EQUAL string_snake .)
    MINUS           reduce using rule 18 (snake_list -> SNAKE IDENTIFIER EQUAL string_snake .)
    NUMBER          reduce using rule 18 (snake_list -> SNAKE IDENTIFIER EQUAL string_snake .)
    STRING          reduce using rule 18 (snake_list -> SNAKE IDENTIFIER EQUAL string_snake .)
    IDENTIFIER      reduce using rule 18 (snake_list -> SNAKE IDENTIFIER EQUAL string_snake .)
    TRUE            reduce using rule 18 (snake_list -> SNAKE IDENTIFIER EQUAL string_snake .)
    FALSE           reduce using rule 18 (snake_list -> SNAKE IDENTIFIER EQUAL string_snake .)
    COMMA           shift and go to state 156

  ! COMMA           [ reduce using rule 18 (snake_list -> SNAKE IDENTIFIER EQUAL string_snake .) ]


state 139

    (19) snake_list -> SNAKE IDENTIFIER EQUAL bool_snake .
    (27) bool_snake -> bool_snake . COMMA bool

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 19 (snake_list -> SNAKE IDENTIFIER EQUAL bool_snake .)
    RPAREN          reduce using rule 19 (snake_list -> SNAKE IDENTIFIER EQUAL bool_snake .)
    MINUS           reduce using rule 19 (snake_list -> SNAKE IDENTIFIER EQUAL bool_snake .)
    NUMBER          reduce using rule 19 (snake_list -> SNAKE IDENTIFIER EQUAL bool_snake .)
    STRING          reduce using rule 19 (snake_list -> SNAKE IDENTIFIER EQUAL bool_snake .)
    IDENTIFIER      reduce using rule 19 (snake_list -> SNAKE IDENTIFIER EQUAL bool_snake .)
    TRUE            reduce using rule 19 (snake_list -> SNAKE IDENTIFIER EQUAL bool_snake .)
    FALSE           reduce using rule 19 (snake_list -> SNAKE IDENTIFIER EQUAL bool_snake .)
    COMMA           shift and go to state 157

  ! COMMA           [ reduce using rule 19 (snake_list -> SNAKE IDENTIFIER EQUAL bool_snake .) ]


state 140

    (22) num_snake -> exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

  ! shift/reduce conflict for MINUS resolved as shift
    COMMA           reduce using rule 22 (num_snake -> exp .)
    SEMICOLON       reduce using rule 22 (num_snake -> exp .)
    RPAREN          reduce using rule 22 (num_snake -> exp .)
    NUMBER          reduce using rule 22 (num_snake -> exp .)
    STRING          reduce using rule 22 (num_snake -> exp .)
    IDENTIFIER      reduce using rule 22 (num_snake -> exp .)
    TRUE            reduce using rule 22 (num_snake -> exp .)
    FALSE           reduce using rule 22 (num_snake -> exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MOD             shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! MINUS           [ reduce using rule 22 (num_snake -> exp .) ]


state 141

    (23) num_snake -> empty .
    (26) string_snake -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 23 (num_snake -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 23 (num_snake -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 23 (num_snake -> empty .)
  ! reduce/reduce conflict for MINUS resolved using rule 23 (num_snake -> empty .)
  ! reduce/reduce conflict for NUMBER resolved using rule 23 (num_snake -> empty .)
  ! reduce/reduce conflict for STRING resolved using rule 23 (num_snake -> empty .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 23 (num_snake -> empty .)
  ! reduce/reduce conflict for TRUE resolved using rule 23 (num_snake -> empty .)
  ! reduce/reduce conflict for FALSE resolved using rule 23 (num_snake -> empty .)
    COMMA           reduce using rule 23 (num_snake -> empty .)
    SEMICOLON       reduce using rule 23 (num_snake -> empty .)
    RPAREN          reduce using rule 23 (num_snake -> empty .)
    MINUS           reduce using rule 23 (num_snake -> empty .)
    NUMBER          reduce using rule 23 (num_snake -> empty .)
    STRING          reduce using rule 23 (num_snake -> empty .)
    IDENTIFIER      reduce using rule 23 (num_snake -> empty .)
    TRUE            reduce using rule 23 (num_snake -> empty .)
    FALSE           reduce using rule 23 (num_snake -> empty .)

  ! COMMA           [ reduce using rule 26 (string_snake -> empty .) ]
  ! SEMICOLON       [ reduce using rule 26 (string_snake -> empty .) ]
  ! RPAREN          [ reduce using rule 26 (string_snake -> empty .) ]
  ! MINUS           [ reduce using rule 26 (string_snake -> empty .) ]
  ! NUMBER          [ reduce using rule 26 (string_snake -> empty .) ]
  ! STRING          [ reduce using rule 26 (string_snake -> empty .) ]
  ! IDENTIFIER      [ reduce using rule 26 (string_snake -> empty .) ]
  ! TRUE            [ reduce using rule 26 (string_snake -> empty .) ]
  ! FALSE           [ reduce using rule 26 (string_snake -> empty .) ]


state 142

    (25) string_snake -> STRING .
    (45) exp -> STRING .

  ! reduce/reduce conflict for MINUS resolved using rule 25 (string_snake -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 25 (string_snake -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 25 (string_snake -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 25 (string_snake -> STRING .)
  ! reduce/reduce conflict for NUMBER resolved using rule 25 (string_snake -> STRING .)
  ! reduce/reduce conflict for STRING resolved using rule 25 (string_snake -> STRING .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 25 (string_snake -> STRING .)
  ! reduce/reduce conflict for TRUE resolved using rule 25 (string_snake -> STRING .)
  ! reduce/reduce conflict for FALSE resolved using rule 25 (string_snake -> STRING .)
    COMMA           reduce using rule 25 (string_snake -> STRING .)
    SEMICOLON       reduce using rule 25 (string_snake -> STRING .)
    RPAREN          reduce using rule 25 (string_snake -> STRING .)
    MINUS           reduce using rule 25 (string_snake -> STRING .)
    NUMBER          reduce using rule 25 (string_snake -> STRING .)
    STRING          reduce using rule 25 (string_snake -> STRING .)
    IDENTIFIER      reduce using rule 25 (string_snake -> STRING .)
    TRUE            reduce using rule 25 (string_snake -> STRING .)
    FALSE           reduce using rule 25 (string_snake -> STRING .)
    TIMES           reduce using rule 45 (exp -> STRING .)
    DIVIDE          reduce using rule 45 (exp -> STRING .)
    PLUS            reduce using rule 45 (exp -> STRING .)
    MOD             reduce using rule 45 (exp -> STRING .)
    PLUSPLUS        reduce using rule 45 (exp -> STRING .)
    MINUSMINUS      reduce using rule 45 (exp -> STRING .)

  ! MINUS           [ reduce using rule 45 (exp -> STRING .) ]
  ! COMMA           [ reduce using rule 45 (exp -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 45 (exp -> STRING .) ]
  ! RPAREN          [ reduce using rule 45 (exp -> STRING .) ]
  ! NUMBER          [ reduce using rule 45 (exp -> STRING .) ]
  ! STRING          [ reduce using rule 45 (exp -> STRING .) ]
  ! IDENTIFIER      [ reduce using rule 45 (exp -> STRING .) ]
  ! TRUE            [ reduce using rule 45 (exp -> STRING .) ]
  ! FALSE           [ reduce using rule 45 (exp -> STRING .) ]


state 143

    (28) bool_snake -> bool .
    (46) exp -> bool .

  ! reduce/reduce conflict for MINUS resolved using rule 28 (bool_snake -> bool .)
  ! reduce/reduce conflict for COMMA resolved using rule 28 (bool_snake -> bool .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 28 (bool_snake -> bool .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (bool_snake -> bool .)
  ! reduce/reduce conflict for NUMBER resolved using rule 28 (bool_snake -> bool .)
  ! reduce/reduce conflict for STRING resolved using rule 28 (bool_snake -> bool .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 28 (bool_snake -> bool .)
  ! reduce/reduce conflict for TRUE resolved using rule 28 (bool_snake -> bool .)
  ! reduce/reduce conflict for FALSE resolved using rule 28 (bool_snake -> bool .)
    COMMA           reduce using rule 28 (bool_snake -> bool .)
    SEMICOLON       reduce using rule 28 (bool_snake -> bool .)
    RPAREN          reduce using rule 28 (bool_snake -> bool .)
    MINUS           reduce using rule 28 (bool_snake -> bool .)
    NUMBER          reduce using rule 28 (bool_snake -> bool .)
    STRING          reduce using rule 28 (bool_snake -> bool .)
    IDENTIFIER      reduce using rule 28 (bool_snake -> bool .)
    TRUE            reduce using rule 28 (bool_snake -> bool .)
    FALSE           reduce using rule 28 (bool_snake -> bool .)
    TIMES           reduce using rule 46 (exp -> bool .)
    DIVIDE          reduce using rule 46 (exp -> bool .)
    PLUS            reduce using rule 46 (exp -> bool .)
    MOD             reduce using rule 46 (exp -> bool .)
    PLUSPLUS        reduce using rule 46 (exp -> bool .)
    MINUSMINUS      reduce using rule 46 (exp -> bool .)

  ! MINUS           [ reduce using rule 46 (exp -> bool .) ]
  ! COMMA           [ reduce using rule 46 (exp -> bool .) ]
  ! SEMICOLON       [ reduce using rule 46 (exp -> bool .) ]
  ! RPAREN          [ reduce using rule 46 (exp -> bool .) ]
  ! NUMBER          [ reduce using rule 46 (exp -> bool .) ]
  ! STRING          [ reduce using rule 46 (exp -> bool .) ]
  ! IDENTIFIER      [ reduce using rule 46 (exp -> bool .) ]
  ! TRUE            [ reduce using rule 46 (exp -> bool .) ]
  ! FALSE           [ reduce using rule 46 (exp -> bool .) ]


state 144

    (62) main_statement -> MAYBE rel_exp compoundstmt OR compoundstmt .
    (57) stmt -> MAYBE rel_exp compoundstmt OR compoundstmt .

    $end            reduce using rule 62 (main_statement -> MAYBE rel_exp compoundstmt OR compoundstmt .)
    SEMICOLON       reduce using rule 57 (stmt -> MAYBE rel_exp compoundstmt OR compoundstmt .)


state 145

    (69) stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER . NUMBER
    (68) stmt -> IDENTIFIER SLICE NUMBER . NUMBER

    NUMBER          shift and go to state 158


state 146

    (73) params -> stmt COMMA params .

    RPAREN          reduce using rule 73 (params -> stmt COMMA params .)


state 147

    (82) stmt -> IDENTIFIER ACCESS IDENTIFIER EQUAL exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 82 (stmt -> IDENTIFIER ACCESS IDENTIFIER EQUAL exp .)
    COMMA           reduce using rule 82 (stmt -> IDENTIFIER ACCESS IDENTIFIER EQUAL exp .)
    RPAREN          reduce using rule 82 (stmt -> IDENTIFIER ACCESS IDENTIFIER EQUAL exp .)
    NUMBER          reduce using rule 82 (stmt -> IDENTIFIER ACCESS IDENTIFIER EQUAL exp .)
    STRING          reduce using rule 82 (stmt -> IDENTIFIER ACCESS IDENTIFIER EQUAL exp .)
    IDENTIFIER      reduce using rule 82 (stmt -> IDENTIFIER ACCESS IDENTIFIER EQUAL exp .)
    TRUE            reduce using rule 82 (stmt -> IDENTIFIER ACCESS IDENTIFIER EQUAL exp .)
    FALSE           reduce using rule 82 (stmt -> IDENTIFIER ACCESS IDENTIFIER EQUAL exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MOD             shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! MINUS           [ reduce using rule 82 (stmt -> IDENTIFIER ACCESS IDENTIFIER EQUAL exp .) ]


state 148

    (70) stmt -> MACHINE IDENTIFIER LPAREN optparams RPAREN . compoundstmt
    (58) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 74

    compoundstmt                   shift and go to state 159

state 149

    (57) stmt -> MAYBE rel_exp compoundstmt OR . compoundstmt
    (58) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 74

    compoundstmt                   shift and go to state 160

state 150

    (68) stmt -> IDENTIFIER SLICE NUMBER NUMBER .

    SEMICOLON       reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    COMMA           reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    RPAREN          reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    MINUS           reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    NUMBER          reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    STRING          reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    IDENTIFIER      reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    TRUE            reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    FALSE           reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)


state 151

    (78) attributes -> IDENTIFIER SEMICOLON . attributes
    (79) attributes -> IDENTIFIER SEMICOLON .
    (78) attributes -> . IDENTIFIER SEMICOLON attributes
    (79) attributes -> . IDENTIFIER SEMICOLON
    (80) attributes -> . empty
    (29) empty -> .

  ! reduce/reduce conflict for RBRACE resolved using rule 29 (empty -> .)
    IDENTIFIER      shift and go to state 128
    RBRACE          reduce using rule 29 (empty -> .)

  ! RBRACE          [ reduce using rule 79 (attributes -> IDENTIFIER SEMICOLON .) ]

    attributes                     shift and go to state 161
    empty                          shift and go to state 130

state 152

    (77) stmt -> COMPLEX IDENTIFIER LBRACE attributes RBRACE .

    SEMICOLON       reduce using rule 77 (stmt -> COMPLEX IDENTIFIER LBRACE attributes RBRACE .)
    COMMA           reduce using rule 77 (stmt -> COMPLEX IDENTIFIER LBRACE attributes RBRACE .)
    RPAREN          reduce using rule 77 (stmt -> COMPLEX IDENTIFIER LBRACE attributes RBRACE .)
    MINUS           reduce using rule 77 (stmt -> COMPLEX IDENTIFIER LBRACE attributes RBRACE .)
    NUMBER          reduce using rule 77 (stmt -> COMPLEX IDENTIFIER LBRACE attributes RBRACE .)
    STRING          reduce using rule 77 (stmt -> COMPLEX IDENTIFIER LBRACE attributes RBRACE .)
    IDENTIFIER      reduce using rule 77 (stmt -> COMPLEX IDENTIFIER LBRACE attributes RBRACE .)
    TRUE            reduce using rule 77 (stmt -> COMPLEX IDENTIFIER LBRACE attributes RBRACE .)
    FALSE           reduce using rule 77 (stmt -> COMPLEX IDENTIFIER LBRACE attributes RBRACE .)


state 153

    (4) til -> TIL LPAREN assign_identifier rel_exp exp . RPAREN compoundstmt
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

    RPAREN          shift and go to state 162
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MOD             shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53


state 154

    (5) until -> WORK compoundstmt UNTIL LPAREN rel_exp . RPAREN

    RPAREN          shift and go to state 163


state 155

    (21) num_snake -> num_snake COMMA . exp
    (36) exp -> . exp TIMES exp
    (37) exp -> . exp DIVIDE exp
    (38) exp -> . exp PLUS exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MOD exp
    (41) exp -> . exp PLUSPLUS
    (42) exp -> . exp MINUSMINUS
    (43) exp -> . MINUS exp
    (44) exp -> . NUMBER
    (45) exp -> . STRING
    (46) exp -> . bool
    (49) exp -> . IDENTIFIER
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    MINUS           shift and go to state 27
    NUMBER          shift and go to state 8
    STRING          shift and go to state 28
    IDENTIFIER      shift and go to state 39
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 164
    bool                           shift and go to state 29

state 156

    (24) string_snake -> string_snake COMMA . STRING

    STRING          shift and go to state 165


state 157

    (27) bool_snake -> bool_snake COMMA . bool
    (47) bool -> . TRUE
    (48) bool -> . FALSE

    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    bool                           shift and go to state 166

state 158

    (69) stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER .
    (68) stmt -> IDENTIFIER SLICE NUMBER NUMBER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
  ! reduce/reduce conflict for STRING resolved using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
  ! reduce/reduce conflict for TRUE resolved using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
  ! reduce/reduce conflict for FALSE resolved using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    SEMICOLON       reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    COMMA           reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    RPAREN          reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    MINUS           reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    NUMBER          reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    STRING          reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    IDENTIFIER      reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    TRUE            reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)
    FALSE           reduce using rule 68 (stmt -> IDENTIFIER SLICE NUMBER NUMBER .)

  ! SEMICOLON       [ reduce using rule 69 (stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER .) ]
  ! COMMA           [ reduce using rule 69 (stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER .) ]
  ! RPAREN          [ reduce using rule 69 (stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER .) ]
  ! MINUS           [ reduce using rule 69 (stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER .) ]
  ! NUMBER          [ reduce using rule 69 (stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER .) ]
  ! STRING          [ reduce using rule 69 (stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER .) ]
  ! IDENTIFIER      [ reduce using rule 69 (stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER .) ]
  ! TRUE            [ reduce using rule 69 (stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER .) ]
  ! FALSE           [ reduce using rule 69 (stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER .) ]


state 159

    (70) stmt -> MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt .

    SEMICOLON       reduce using rule 70 (stmt -> MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    COMMA           reduce using rule 70 (stmt -> MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    RPAREN          reduce using rule 70 (stmt -> MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    MINUS           reduce using rule 70 (stmt -> MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    NUMBER          reduce using rule 70 (stmt -> MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    STRING          reduce using rule 70 (stmt -> MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    IDENTIFIER      reduce using rule 70 (stmt -> MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    TRUE            reduce using rule 70 (stmt -> MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    FALSE           reduce using rule 70 (stmt -> MACHINE IDENTIFIER LPAREN optparams RPAREN compoundstmt .)


state 160

    (57) stmt -> MAYBE rel_exp compoundstmt OR compoundstmt .

    SEMICOLON       reduce using rule 57 (stmt -> MAYBE rel_exp compoundstmt OR compoundstmt .)
    COMMA           reduce using rule 57 (stmt -> MAYBE rel_exp compoundstmt OR compoundstmt .)
    RPAREN          reduce using rule 57 (stmt -> MAYBE rel_exp compoundstmt OR compoundstmt .)
    MINUS           reduce using rule 57 (stmt -> MAYBE rel_exp compoundstmt OR compoundstmt .)
    NUMBER          reduce using rule 57 (stmt -> MAYBE rel_exp compoundstmt OR compoundstmt .)
    STRING          reduce using rule 57 (stmt -> MAYBE rel_exp compoundstmt OR compoundstmt .)
    IDENTIFIER      reduce using rule 57 (stmt -> MAYBE rel_exp compoundstmt OR compoundstmt .)
    TRUE            reduce using rule 57 (stmt -> MAYBE rel_exp compoundstmt OR compoundstmt .)
    FALSE           reduce using rule 57 (stmt -> MAYBE rel_exp compoundstmt OR compoundstmt .)


state 161

    (78) attributes -> IDENTIFIER SEMICOLON attributes .

    RBRACE          reduce using rule 78 (attributes -> IDENTIFIER SEMICOLON attributes .)


state 162

    (4) til -> TIL LPAREN assign_identifier rel_exp exp RPAREN . compoundstmt
    (58) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 74

    compoundstmt                   shift and go to state 167

state 163

    (5) until -> WORK compoundstmt UNTIL LPAREN rel_exp RPAREN .

    SEMICOLON       reduce using rule 5 (until -> WORK compoundstmt UNTIL LPAREN rel_exp RPAREN .)
    COMMA           reduce using rule 5 (until -> WORK compoundstmt UNTIL LPAREN rel_exp RPAREN .)
    RPAREN          reduce using rule 5 (until -> WORK compoundstmt UNTIL LPAREN rel_exp RPAREN .)
    MINUS           reduce using rule 5 (until -> WORK compoundstmt UNTIL LPAREN rel_exp RPAREN .)
    NUMBER          reduce using rule 5 (until -> WORK compoundstmt UNTIL LPAREN rel_exp RPAREN .)
    STRING          reduce using rule 5 (until -> WORK compoundstmt UNTIL LPAREN rel_exp RPAREN .)
    IDENTIFIER      reduce using rule 5 (until -> WORK compoundstmt UNTIL LPAREN rel_exp RPAREN .)
    TRUE            reduce using rule 5 (until -> WORK compoundstmt UNTIL LPAREN rel_exp RPAREN .)
    FALSE           reduce using rule 5 (until -> WORK compoundstmt UNTIL LPAREN rel_exp RPAREN .)


state 164

    (21) num_snake -> num_snake COMMA exp .
    (36) exp -> exp . TIMES exp
    (37) exp -> exp . DIVIDE exp
    (38) exp -> exp . PLUS exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MOD exp
    (41) exp -> exp . PLUSPLUS
    (42) exp -> exp . MINUSMINUS

  ! shift/reduce conflict for MINUS resolved as shift
    COMMA           reduce using rule 21 (num_snake -> num_snake COMMA exp .)
    SEMICOLON       reduce using rule 21 (num_snake -> num_snake COMMA exp .)
    RPAREN          reduce using rule 21 (num_snake -> num_snake COMMA exp .)
    NUMBER          reduce using rule 21 (num_snake -> num_snake COMMA exp .)
    STRING          reduce using rule 21 (num_snake -> num_snake COMMA exp .)
    IDENTIFIER      reduce using rule 21 (num_snake -> num_snake COMMA exp .)
    TRUE            reduce using rule 21 (num_snake -> num_snake COMMA exp .)
    FALSE           reduce using rule 21 (num_snake -> num_snake COMMA exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MOD             shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! MINUS           [ reduce using rule 21 (num_snake -> num_snake COMMA exp .) ]


state 165

    (24) string_snake -> string_snake COMMA STRING .

    COMMA           reduce using rule 24 (string_snake -> string_snake COMMA STRING .)
    SEMICOLON       reduce using rule 24 (string_snake -> string_snake COMMA STRING .)
    RPAREN          reduce using rule 24 (string_snake -> string_snake COMMA STRING .)
    MINUS           reduce using rule 24 (string_snake -> string_snake COMMA STRING .)
    NUMBER          reduce using rule 24 (string_snake -> string_snake COMMA STRING .)
    STRING          reduce using rule 24 (string_snake -> string_snake COMMA STRING .)
    IDENTIFIER      reduce using rule 24 (string_snake -> string_snake COMMA STRING .)
    TRUE            reduce using rule 24 (string_snake -> string_snake COMMA STRING .)
    FALSE           reduce using rule 24 (string_snake -> string_snake COMMA STRING .)


state 166

    (27) bool_snake -> bool_snake COMMA bool .

    COMMA           reduce using rule 27 (bool_snake -> bool_snake COMMA bool .)
    SEMICOLON       reduce using rule 27 (bool_snake -> bool_snake COMMA bool .)
    RPAREN          reduce using rule 27 (bool_snake -> bool_snake COMMA bool .)
    MINUS           reduce using rule 27 (bool_snake -> bool_snake COMMA bool .)
    NUMBER          reduce using rule 27 (bool_snake -> bool_snake COMMA bool .)
    STRING          reduce using rule 27 (bool_snake -> bool_snake COMMA bool .)
    IDENTIFIER      reduce using rule 27 (bool_snake -> bool_snake COMMA bool .)
    TRUE            reduce using rule 27 (bool_snake -> bool_snake COMMA bool .)
    FALSE           reduce using rule 27 (bool_snake -> bool_snake COMMA bool .)


state 167

    (4) til -> TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt .

    SEMICOLON       reduce using rule 4 (til -> TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt .)
    COMMA           reduce using rule 4 (til -> TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt .)
    RPAREN          reduce using rule 4 (til -> TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt .)
    MINUS           reduce using rule 4 (til -> TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt .)
    NUMBER          reduce using rule 4 (til -> TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt .)
    STRING          reduce using rule 4 (til -> TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt .)
    IDENTIFIER      reduce using rule 4 (til -> TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt .)
    TRUE            reduce using rule 4 (til -> TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt .)
    FALSE           reduce using rule 4 (til -> TIL LPAREN assign_identifier rel_exp exp RPAREN compoundstmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 12 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 22 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 22 resolved as shift
WARNING: shift/reduce conflict for STRING in state 22 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 22 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 22 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 22 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 43 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 43 resolved as shift
WARNING: shift/reduce conflict for STRING in state 43 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 43 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 43 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 43 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 114 resolved as shift
WARNING: shift/reduce conflict for STRING in state 114 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 114 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 114 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 115 resolved as shift
WARNING: shift/reduce conflict for STRING in state 115 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 115 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 115 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 133 resolved as shift
WARNING: shift/reduce conflict for STRING in state 133 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 133 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 133 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 133 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 137 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 138 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 147 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 164 resolved as shift
WARNING: reduce/reduce conflict in state 86 resolved using rule (stmt -> empty)
WARNING: rejected rule (optparams -> empty) in state 86
WARNING: reduce/reduce conflict in state 141 resolved using rule (num_snake -> empty)
WARNING: rejected rule (string_snake -> empty) in state 141
WARNING: reduce/reduce conflict in state 142 resolved using rule (string_snake -> STRING)
WARNING: rejected rule (exp -> STRING) in state 142
WARNING: reduce/reduce conflict in state 143 resolved using rule (bool_snake -> bool)
WARNING: rejected rule (exp -> bool) in state 143
WARNING: reduce/reduce conflict in state 151 resolved using rule (empty -> <empty>)
WARNING: rejected rule (attributes -> IDENTIFIER SEMICOLON) in state 151
WARNING: reduce/reduce conflict in state 158 resolved using rule (stmt -> IDENTIFIER SLICE NUMBER NUMBER)
WARNING: rejected rule (stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER) in state 158
WARNING: Rule (optparams -> empty) is never reduced
WARNING: Rule (string_snake -> empty) is never reduced
WARNING: Rule (attributes -> IDENTIFIER SEMICOLON) is never reduced
WARNING: Rule (stmt -> IDENTIFIER EQUAL IDENTIFIER SLICE NUMBER NUMBER) is never reduced
